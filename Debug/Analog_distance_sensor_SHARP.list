
Analog_distance_sensor_SHARP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc4  08004fc4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fc4  08004fc4  00014fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fcc  08004fcc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fcc  08004fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fd0  08004fd0  00014fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  08004fe0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08004fe0  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001415c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026d8  00000000  00000000  00034198  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  00036870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001178  00000000  00000000  00037b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028ad0  00000000  00000000  00038cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001044e  00000000  00000000  00061788  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00102fc1  00000000  00000000  00071bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00174b97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f68  00000000  00000000  00174c14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f64 	.word	0x08004f64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004f64 	.word	0x08004f64

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004ea:	4b30      	ldr	r3, [pc, #192]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004ec:	4a30      	ldr	r2, [pc, #192]	; (80005b0 <MX_ADC1_Init+0xe8>)
 80004ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f0:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f6:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fc:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <MX_ADC1_Init+0xe4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000502:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000508:	4b28      	ldr	r3, [pc, #160]	; (80005ac <MX_ADC1_Init+0xe4>)
 800050a:	2204      	movs	r2, #4
 800050c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800050e:	4b27      	ldr	r3, [pc, #156]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000510:	2200      	movs	r2, #0
 8000512:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000514:	4b25      	ldr	r3, [pc, #148]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000516:	2200      	movs	r2, #0
 8000518:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800051a:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_ADC1_Init+0xe4>)
 800051c:	2201      	movs	r2, #1
 800051e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000520:	4b22      	ldr	r3, [pc, #136]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000522:	2200      	movs	r2, #0
 8000524:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_ADC1_Init+0xe4>)
 800052a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_ADC1_Init+0xe4>)
 800053a:	2201      	movs	r2, #1
 800053c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000542:	2200      	movs	r2, #0
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800054e:	4817      	ldr	r0, [pc, #92]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000550:	f000 fdda 	bl	8001108 <HAL_ADC_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800055a:	f000 f9e5 	bl	8000928 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	4619      	mov	r1, r3
 8000568:	4810      	ldr	r0, [pc, #64]	; (80005ac <MX_ADC1_Init+0xe4>)
 800056a:	f001 fceb 	bl	8001f44 <HAL_ADCEx_MultiModeConfigChannel>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000574:	f000 f9d8 	bl	8000928 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_ADC1_Init+0xec>)
 800057a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000580:	2307      	movs	r3, #7
 8000582:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	; 0x7f
 8000586:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_ADC1_Init+0xe4>)
 8000596:	f000 ffd3 	bl	8001540 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80005a0:	f000 f9c2 	bl	8000928 <Error_Handler>
  }

}
 80005a4:	bf00      	nop
 80005a6:	3728      	adds	r7, #40	; 0x28
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000030 	.word	0x20000030
 80005b0:	50040000 	.word	0x50040000
 80005b4:	14f00020 	.word	0x14f00020

080005b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a2b      	ldr	r2, [pc, #172]	; (8000684 <HAL_ADC_MspInit+0xcc>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d14f      	bne.n	800067a <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005da:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <HAL_ADC_MspInit+0xd0>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a2a      	ldr	r2, [pc, #168]	; (8000688 <HAL_ADC_MspInit+0xd0>)
 80005e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b28      	ldr	r3, [pc, #160]	; (8000688 <HAL_ADC_MspInit+0xd0>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <HAL_ADC_MspInit+0xd0>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a24      	ldr	r2, [pc, #144]	; (8000688 <HAL_ADC_MspInit+0xd0>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b22      	ldr	r3, [pc, #136]	; (8000688 <HAL_ADC_MspInit+0xd0>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060a:	2301      	movs	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800060e:	230b      	movs	r3, #11
 8000610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000620:	f002 f846 	bl	80026b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <HAL_ADC_MspInit+0xd4>)
 8000626:	4a1a      	ldr	r2, [pc, #104]	; (8000690 <HAL_ADC_MspInit+0xd8>)
 8000628:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <HAL_ADC_MspInit+0xd4>)
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <HAL_ADC_MspInit+0xd4>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_ADC_MspInit+0xd4>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <HAL_ADC_MspInit+0xd4>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_ADC_MspInit+0xd4>)
 8000644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000648:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <HAL_ADC_MspInit+0xd4>)
 800064c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000650:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <HAL_ADC_MspInit+0xd4>)
 8000654:	2220      	movs	r2, #32
 8000656:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <HAL_ADC_MspInit+0xd4>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800065e:	480b      	ldr	r0, [pc, #44]	; (800068c <HAL_ADC_MspInit+0xd4>)
 8000660:	f001 fe2e 	bl	80022c0 <HAL_DMA_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800066a:	f000 f95d 	bl	8000928 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <HAL_ADC_MspInit+0xd4>)
 8000672:	64da      	str	r2, [r3, #76]	; 0x4c
 8000674:	4a05      	ldr	r2, [pc, #20]	; (800068c <HAL_ADC_MspInit+0xd4>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	; 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	50040000 	.word	0x50040000
 8000688:	40021000 	.word	0x40021000
 800068c:	20000094 	.word	0x20000094
 8000690:	40020008 	.word	0x40020008

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_DMA_Init+0x38>)
 800069c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800069e:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <MX_DMA_Init+0x38>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6493      	str	r3, [r2, #72]	; 0x48
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_DMA_Init+0x38>)
 80006a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	200b      	movs	r0, #11
 80006b8:	f001 fdcb 	bl	8002252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006bc:	200b      	movs	r0, #11
 80006be:	f001 fde4 	bl	800228a <HAL_NVIC_EnableIRQ>

}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <MX_GPIO_Init+0xc4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a2a      	ldr	r2, [pc, #168]	; (8000794 <MX_GPIO_Init+0xc4>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b28      	ldr	r3, [pc, #160]	; (8000794 <MX_GPIO_Init+0xc4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <MX_GPIO_Init+0xc4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <MX_GPIO_Init+0xc4>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <MX_GPIO_Init+0xc4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_GPIO_Init+0xc4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <MX_GPIO_Init+0xc4>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_GPIO_Init+0xc4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_GPIO_Init+0xc4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <MX_GPIO_Init+0xc4>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_GPIO_Init+0xc4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2120      	movs	r1, #32
 800074a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074e:	f002 f957 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_GPIO_Init+0xc8>)
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_GPIO_Init+0xcc>)
 8000768:	f001 ffa2 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800076c:	2320      	movs	r3, #32
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000786:	f001 ff93 	bl	80026b0 <HAL_GPIO_Init>

}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	; 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	10210000 	.word	0x10210000
 800079c:	48000800 	.word	0x48000800

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a4:	f000 fa5e 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a8:	f000 f81a 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ac:	f7ff ff90 	bl	80006d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007b0:	f7ff ff70 	bl	8000694 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007b4:	f000 f9ba 	bl	8000b2c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80007b8:	f7ff fe86 	bl	80004c8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80007bc:	f000 f946 	bl	8000a4c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &adc_measurement, 1);
 80007c0:	2201      	movs	r2, #1
 80007c2:	4904      	ldr	r1, [pc, #16]	; (80007d4 <main+0x34>)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <main+0x38>)
 80007c6:	f000 fdf3 	bl	80013b0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <main+0x3c>)
 80007cc:	f003 fc86 	bl	80040dc <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <main+0x30>
 80007d2:	bf00      	nop
 80007d4:	20000028 	.word	0x20000028
 80007d8:	20000030 	.word	0x20000030
 80007dc:	200000dc 	.word	0x200000dc

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b0b8      	sub	sp, #224	; 0xe0
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007ea:	2244      	movs	r2, #68	; 0x44
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f004 fbb0 	bl	8004f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2288      	movs	r2, #136	; 0x88
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f004 fba2 	bl	8004f54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000810:	2302      	movs	r3, #2
 8000812:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081e:	2310      	movs	r3, #16
 8000820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800082a:	2302      	movs	r3, #2
 800082c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000836:	230a      	movs	r3, #10
 8000838:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800083c:	2307      	movs	r3, #7
 800083e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000842:	2302      	movs	r3, #2
 8000844:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000852:	4618      	mov	r0, r3
 8000854:	f002 f950 	bl	8002af8 <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800085e:	f000 f863 	bl	8000928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	230f      	movs	r3, #15
 8000864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000868:	2303      	movs	r3, #3
 800086a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000880:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000884:	2104      	movs	r1, #4
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fd1c 	bl	80032c4 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000892:	f000 f849 	bl	8000928 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000896:	f244 0302 	movw	r3, #16386	; 0x4002
 800089a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800089c:	2300      	movs	r3, #0
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008a4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80008a6:	2302      	movs	r3, #2
 80008a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80008ae:	2308      	movs	r3, #8
 80008b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008b2:	2307      	movs	r3, #7
 80008b4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008c2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 ff00 	bl	80036cc <HAL_RCCEx_PeriphCLKConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80008d2:	f000 f829 	bl	8000928 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008da:	f002 f8b7 	bl	8002a4c <HAL_PWREx_ControlVoltageScaling>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80008e4:	f000 f820 	bl	8000928 <Error_Handler>
  }
}
 80008e8:	bf00      	nop
 80008ea:	37e0      	adds	r7, #224	; 0xe0
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if(adc_measurement == 0)
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_ADC_ConvCpltCallback+0x30>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d009      	beq.n	8000914 <HAL_ADC_ConvCpltCallback+0x24>
		return;

	distance_cm = CONVERT_ADC_TO_DISTANCE(adc_measurement);
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <HAL_ADC_ConvCpltCallback+0x30>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f44f 4212 	mov.w	r2, #37376	; 0x9200
 8000908:	fbb2 f3f3 	udiv	r3, r2, r3
 800090c:	3b04      	subs	r3, #4
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <HAL_ADC_ConvCpltCallback+0x34>)
 8000910:	6013      	str	r3, [r2, #0]
 8000912:	e000      	b.n	8000916 <HAL_ADC_ConvCpltCallback+0x26>
		return;
 8000914:	bf00      	nop
}
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	20000028 	.word	0x20000028
 8000924:	2000002c 	.word	0x2000002c

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092e:	e7fe      	b.n	800092e <Error_Handler+0x6>

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_MspInit+0x44>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6613      	str	r3, [r2, #96]	; 0x60
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_MspInit+0x44>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x44>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6593      	str	r3, [r2, #88]	; 0x58
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x44>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f9aa 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <DMA1_Channel1_IRQHandler+0x10>)
 80009d2:	f001 fd8d 	bl	80024f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000094 	.word	0x20000094

080009e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <SystemInit+0x64>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <SystemInit+0x64>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <SystemInit+0x68>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <SystemInit+0x68>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <SystemInit+0x68>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <SystemInit+0x68>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <SystemInit+0x68>)
 8000a0c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a10:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <SystemInit+0x68>)
 8000a18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a1c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <SystemInit+0x68>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <SystemInit+0x68>)
 8000a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a28:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <SystemInit+0x68>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SystemInit+0x64>)
 8000a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a36:	609a      	str	r2, [r3, #8]
#endif
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	40021000 	.word	0x40021000

08000a4c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_TIM3_Init+0x98>)
 8000a6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <MX_TIM3_Init+0x9c>)
 8000a6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_TIM3_Init+0x98>)
 8000a72:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_TIM3_Init+0x98>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_TIM3_Init+0x98>)
 8000a80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_TIM3_Init+0x98>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_TIM3_Init+0x98>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a92:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <MX_TIM3_Init+0x98>)
 8000a94:	f003 faca 	bl	800402c <HAL_TIM_Base_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000a9e:	f7ff ff43 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4619      	mov	r1, r3
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_TIM3_Init+0x98>)
 8000ab0:	f003 fb7c 	bl	80041ac <HAL_TIM_ConfigClockSource>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000aba:	f7ff ff35 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000abe:	2320      	movs	r3, #32
 8000ac0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_TIM3_Init+0x98>)
 8000acc:	f003 fd5c 	bl	8004588 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000ad6:	f7ff ff27 	bl	8000928 <Error_Handler>
  }

}
 8000ada:	bf00      	nop
 8000adc:	3720      	adds	r7, #32
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000dc 	.word	0x200000dc
 8000ae8:	40000400 	.word	0x40000400

08000aec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_TIM_Base_MspInit+0x38>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10b      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_TIM_Base_MspInit+0x3c>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <HAL_TIM_Base_MspInit+0x3c>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <HAL_TIM_Base_MspInit+0x3c>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40000400 	.word	0x40000400
 8000b28:	40021000 	.word	0x40021000

08000b2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b32:	4a15      	ldr	r2, [pc, #84]	; (8000b88 <MX_USART2_UART_Init+0x5c>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART2_UART_Init+0x58>)
 8000b70:	f003 fd92 	bl	8004698 <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b7a:	f7ff fed5 	bl	8000928 <Error_Handler>
  }

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000128 	.word	0x20000128
 8000b88:	40004400 	.word	0x40004400

08000b8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_UART_MspInit+0x7c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d128      	bne.n	8000c00 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb2:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bde:	230c      	movs	r3, #12
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f001 fd58 	bl	80026b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40021000 	.word	0x40021000

08000c10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c14:	f7ff fee4 	bl	80009e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c1a:	e003      	b.n	8000c24 <LoopCopyDataInit>

08000c1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c22:	3104      	adds	r1, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c24:	480a      	ldr	r0, [pc, #40]	; (8000c50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c2c:	d3f6      	bcc.n	8000c1c <CopyDataInit>
	ldr	r2, =_sbss
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c30:	e002      	b.n	8000c38 <LoopFillZerobss>

08000c32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c34:	f842 3b04 	str.w	r3, [r2], #4

08000c38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <LoopForever+0x16>)
	cmp	r2, r3
 8000c3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c3c:	d3f9      	bcc.n	8000c32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f004 f965 	bl	8004f0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c42:	f7ff fdad 	bl	80007a0 <main>

08000c46 <LoopForever>:

LoopForever:
    b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c48:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c4c:	08004fd4 	.word	0x08004fd4
	ldr	r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c54:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000c58:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c5c:	200001ac 	.word	0x200001ac

08000c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_2_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_Init+0x3c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <HAL_Init+0x3c>)
 8000c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	f001 fade 	bl	800223c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c80:	2000      	movs	r0, #0
 8000c82:	f000 f80f 	bl	8000ca4 <HAL_InitTick>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	71fb      	strb	r3, [r7, #7]
 8000c90:	e001      	b.n	8000c96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c92:	f7ff fe4d 	bl	8000930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c96:	79fb      	ldrb	r3, [r7, #7]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40022000 	.word	0x40022000

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <HAL_InitTick+0x6c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d023      	beq.n	8000d00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <HAL_InitTick+0x70>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_InitTick+0x6c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 fae9 	bl	80022a6 <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10f      	bne.n	8000cfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d809      	bhi.n	8000cf4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f001 fab3 	bl	8002252 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <HAL_InitTick+0x74>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e007      	b.n	8000d04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e004      	b.n	8000d04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	e001      	b.n	8000d04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000004 	.word	0x20000004

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	200001a8 	.word	0x200001a8

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200001a8 	.word	0x200001a8

08000d5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	431a      	orrs	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	609a      	str	r2, [r3, #8]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	431a      	orrs	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
 8000dd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3360      	adds	r3, #96	; 0x60
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <LL_ADC_SetOffset+0x44>)
 8000de6:	4013      	ands	r3, r2
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	4313      	orrs	r3, r2
 8000df4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000dfc:	bf00      	nop
 8000dfe:	371c      	adds	r7, #28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	03fff000 	.word	0x03fff000

08000e0c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3360      	adds	r3, #96	; 0x60
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3360      	adds	r3, #96	; 0x60
 8000e48:	461a      	mov	r2, r3
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e62:	bf00      	nop
 8000e64:	371c      	adds	r7, #28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3330      	adds	r3, #48	; 0x30
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	4413      	add	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	f003 031f 	and.w	r3, r3, #31
 8000ebe:	211f      	movs	r1, #31
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	0e9b      	lsrs	r3, r3, #26
 8000ecc:	f003 011f 	and.w	r1, r3, #31
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	f003 031f 	and.w	r3, r3, #31
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	431a      	orrs	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ee0:	bf00      	nop
 8000ee2:	371c      	adds	r7, #28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	3314      	adds	r3, #20
 8000efc:	461a      	mov	r2, r3
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	0e5b      	lsrs	r3, r3, #25
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	4413      	add	r3, r2
 8000f0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	0d1b      	lsrs	r3, r3, #20
 8000f14:	f003 031f 	and.w	r3, r3, #31
 8000f18:	2107      	movs	r1, #7
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	401a      	ands	r2, r3
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	0d1b      	lsrs	r3, r3, #20
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	431a      	orrs	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f36:	bf00      	nop
 8000f38:	371c      	adds	r7, #28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	401a      	ands	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0318 	and.w	r3, r3, #24
 8000f66:	4908      	ldr	r1, [pc, #32]	; (8000f88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f68:	40d9      	lsrs	r1, r3
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	400b      	ands	r3, r1
 8000f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f72:	431a      	orrs	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	0007ffff 	.word	0x0007ffff

08000f8c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f003 031f 	and.w	r3, r3, #31
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000fb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6093      	str	r3, [r2, #8]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fe0:	d101      	bne.n	8000fe6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001004:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001008:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001030:	d101      	bne.n	8001036 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001058:	f043 0201 	orr.w	r2, r3, #1
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b01      	cmp	r3, #1
 800107e:	d101      	bne.n	8001084 <LL_ADC_IsEnabled+0x18>
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <LL_ADC_IsEnabled+0x1a>
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010a6:	f043 0204 	orr.w	r2, r3, #4
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d101      	bne.n	80010d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d101      	bne.n	80010f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e134      	b.n	800138c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112c:	2b00      	cmp	r3, #0
 800112e:	d109      	bne.n	8001144 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff fa41 	bl	80005b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff3f 	bl	8000fcc <LL_ADC_IsDeepPowerDownEnabled>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d004      	beq.n	800115e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff25 	bl	8000fa8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff5a 	bl	800101c <LL_ADC_IsInternalRegulatorEnabled>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d113      	bne.n	8001196 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff3e 	bl	8000ff4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001178:	4b86      	ldr	r3, [pc, #536]	; (8001394 <HAL_ADC_Init+0x28c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	099b      	lsrs	r3, r3, #6
 800117e:	4a86      	ldr	r2, [pc, #536]	; (8001398 <HAL_ADC_Init+0x290>)
 8001180:	fba2 2303 	umull	r2, r3, r2, r3
 8001184:	099b      	lsrs	r3, r3, #6
 8001186:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001188:	e002      	b.n	8001190 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	3b01      	subs	r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f9      	bne.n	800118a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff3e 	bl	800101c <LL_ADC_IsInternalRegulatorEnabled>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10d      	bne.n	80011c2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011aa:	f043 0210 	orr.w	r2, r3, #16
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	f043 0201 	orr.w	r2, r3, #1
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff77 	bl	80010ba <LL_ADC_REG_IsConversionOngoing>
 80011cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f040 80cf 	bne.w	800137a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f040 80cb 	bne.w	800137a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011ec:	f043 0202 	orr.w	r2, r3, #2
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff37 	bl	800106c <LL_ADC_IsEnabled>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d115      	bne.n	8001230 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001204:	4865      	ldr	r0, [pc, #404]	; (800139c <HAL_ADC_Init+0x294>)
 8001206:	f7ff ff31 	bl	800106c <LL_ADC_IsEnabled>
 800120a:	4604      	mov	r4, r0
 800120c:	4864      	ldr	r0, [pc, #400]	; (80013a0 <HAL_ADC_Init+0x298>)
 800120e:	f7ff ff2d 	bl	800106c <LL_ADC_IsEnabled>
 8001212:	4603      	mov	r3, r0
 8001214:	431c      	orrs	r4, r3
 8001216:	4863      	ldr	r0, [pc, #396]	; (80013a4 <HAL_ADC_Init+0x29c>)
 8001218:	f7ff ff28 	bl	800106c <LL_ADC_IsEnabled>
 800121c:	4603      	mov	r3, r0
 800121e:	4323      	orrs	r3, r4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d105      	bne.n	8001230 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4619      	mov	r1, r3
 800122a:	485f      	ldr	r0, [pc, #380]	; (80013a8 <HAL_ADC_Init+0x2a0>)
 800122c:	f7ff fd96 	bl	8000d5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7e5b      	ldrb	r3, [r3, #25]
 8001234:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800123a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001240:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001246:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d106      	bne.n	800126c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001262:	3b01      	subs	r3, #1
 8001264:	045b      	lsls	r3, r3, #17
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001270:	2b00      	cmp	r3, #0
 8001272:	d009      	beq.n	8001288 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001278:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68da      	ldr	r2, [r3, #12]
 800128e:	4b47      	ldr	r3, [pc, #284]	; (80013ac <HAL_ADC_Init+0x2a4>)
 8001290:	4013      	ands	r3, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	430b      	orrs	r3, r1
 800129a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff0a 	bl	80010ba <LL_ADC_REG_IsConversionOngoing>
 80012a6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff17 	bl	80010e0 <LL_ADC_INJ_IsConversionOngoing>
 80012b2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d13d      	bne.n	8001336 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d13a      	bne.n	8001336 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012c4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012cc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012dc:	f023 0302 	bic.w	r3, r3, #2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	69b9      	ldr	r1, [r7, #24]
 80012e6:	430b      	orrs	r3, r1
 80012e8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d118      	bne.n	8001326 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012fe:	f023 0304 	bic.w	r3, r3, #4
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800130a:	4311      	orrs	r1, r2
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001310:	4311      	orrs	r1, r2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001316:	430a      	orrs	r2, r1
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	611a      	str	r2, [r3, #16]
 8001324:	e007      	b.n	8001336 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0201 	bic.w	r2, r2, #1
 8001334:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d10c      	bne.n	8001358 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	f023 010f 	bic.w	r1, r3, #15
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	1e5a      	subs	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	631a      	str	r2, [r3, #48]	; 0x30
 8001356:	e007      	b.n	8001368 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 020f 	bic.w	r2, r2, #15
 8001366:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136c:	f023 0303 	bic.w	r3, r3, #3
 8001370:	f043 0201 	orr.w	r2, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	655a      	str	r2, [r3, #84]	; 0x54
 8001378:	e007      	b.n	800138a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137e:	f043 0210 	orr.w	r2, r3, #16
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800138a:	7ffb      	ldrb	r3, [r7, #31]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3724      	adds	r7, #36	; 0x24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd90      	pop	{r4, r7, pc}
 8001394:	20000000 	.word	0x20000000
 8001398:	053e2d63 	.word	0x053e2d63
 800139c:	50040000 	.word	0x50040000
 80013a0:	50040100 	.word	0x50040100
 80013a4:	50040200 	.word	0x50040200
 80013a8:	50040300 	.word	0x50040300
 80013ac:	fff0c007 	.word	0xfff0c007

080013b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013bc:	4850      	ldr	r0, [pc, #320]	; (8001500 <HAL_ADC_Start_DMA+0x150>)
 80013be:	f7ff fde5 	bl	8000f8c <LL_ADC_GetMultimode>
 80013c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fe76 	bl	80010ba <LL_ADC_REG_IsConversionOngoing>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f040 808e 	bne.w	80014f2 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_ADC_Start_DMA+0x34>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e089      	b.n	80014f8 <HAL_ADC_Start_DMA+0x148>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d002      	beq.n	80013fe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	2b09      	cmp	r3, #9
 80013fc:	d172      	bne.n	80014e4 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 fc8c 	bl	8001d1c <ADC_Enable>
 8001404:	4603      	mov	r3, r0
 8001406:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d165      	bne.n	80014da <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001412:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a37      	ldr	r2, [pc, #220]	; (8001504 <HAL_ADC_Start_DMA+0x154>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d002      	beq.n	8001432 <HAL_ADC_Start_DMA+0x82>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	e000      	b.n	8001434 <HAL_ADC_Start_DMA+0x84>
 8001432:	4b35      	ldr	r3, [pc, #212]	; (8001508 <HAL_ADC_Start_DMA+0x158>)
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	4293      	cmp	r3, r2
 800143a:	d002      	beq.n	8001442 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d105      	bne.n	800144e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001446:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d006      	beq.n	8001468 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	f023 0206 	bic.w	r2, r3, #6
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	659a      	str	r2, [r3, #88]	; 0x58
 8001466:	e002      	b.n	800146e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a26      	ldr	r2, [pc, #152]	; (800150c <HAL_ADC_Start_DMA+0x15c>)
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	4a25      	ldr	r2, [pc, #148]	; (8001510 <HAL_ADC_Start_DMA+0x160>)
 800147c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a24      	ldr	r2, [pc, #144]	; (8001514 <HAL_ADC_Start_DMA+0x164>)
 8001484:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	221c      	movs	r2, #28
 800148c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 0210 	orr.w	r2, r2, #16
 80014a4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f042 0201 	orr.w	r2, r2, #1
 80014b4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3340      	adds	r3, #64	; 0x40
 80014c0:	4619      	mov	r1, r3
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f000 ffb3 	bl	8002430 <HAL_DMA_Start_IT>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fddd 	bl	8001092 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80014d8:	e00d      	b.n	80014f6 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80014e2:	e008      	b.n	80014f6 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80014f0:	e001      	b.n	80014f6 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014f2:	2302      	movs	r3, #2
 80014f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	50040300 	.word	0x50040300
 8001504:	50040100 	.word	0x50040100
 8001508:	50040000 	.word	0x50040000
 800150c:	08001dd1 	.word	0x08001dd1
 8001510:	08001ea9 	.word	0x08001ea9
 8001514:	08001ec5 	.word	0x08001ec5

08001518 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0b6      	sub	sp, #216	; 0xd8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800155a:	2b01      	cmp	r3, #1
 800155c:	d101      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x22>
 800155e:	2302      	movs	r3, #2
 8001560:	e3c6      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x7b0>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fda3 	bl	80010ba <LL_ADC_REG_IsConversionOngoing>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 83a7 	bne.w	8001cca <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b05      	cmp	r3, #5
 8001582:	d824      	bhi.n	80015ce <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	3b02      	subs	r3, #2
 800158a:	2b03      	cmp	r3, #3
 800158c:	d81b      	bhi.n	80015c6 <HAL_ADC_ConfigChannel+0x86>
 800158e:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <HAL_ADC_ConfigChannel+0x54>)
 8001590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001594:	080015a5 	.word	0x080015a5
 8001598:	080015ad 	.word	0x080015ad
 800159c:	080015b5 	.word	0x080015b5
 80015a0:	080015bd 	.word	0x080015bd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	220c      	movs	r2, #12
 80015a8:	605a      	str	r2, [r3, #4]
          break;
 80015aa:	e011      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2212      	movs	r2, #18
 80015b0:	605a      	str	r2, [r3, #4]
          break;
 80015b2:	e00d      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2218      	movs	r2, #24
 80015b8:	605a      	str	r2, [r3, #4]
          break;
 80015ba:	e009      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c2:	605a      	str	r2, [r3, #4]
          break;
 80015c4:	e004      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2206      	movs	r2, #6
 80015ca:	605a      	str	r2, [r3, #4]
          break;
 80015cc:	e000      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80015ce:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	f7ff fc59 	bl	8000e94 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fd67 	bl	80010ba <LL_ADC_REG_IsConversionOngoing>
 80015ec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fd73 	bl	80010e0 <LL_ADC_INJ_IsConversionOngoing>
 80015fa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 81a6 	bne.w	8001954 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800160c:	2b00      	cmp	r3, #0
 800160e:	f040 81a1 	bne.w	8001954 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	6819      	ldr	r1, [r3, #0]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	461a      	mov	r2, r3
 8001620:	f7ff fc64 	bl	8000eec <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	08db      	lsrs	r3, r3, #3
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b04      	cmp	r3, #4
 8001644:	d00a      	beq.n	800165c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6919      	ldr	r1, [r3, #16]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001656:	f7ff fbb5 	bl	8000dc4 <LL_ADC_SetOffset>
 800165a:	e17b      	b.n	8001954 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fbd2 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10a      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x148>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fbc7 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	0e9b      	lsrs	r3, r3, #26
 8001682:	f003 021f 	and.w	r2, r3, #31
 8001686:	e01e      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x186>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fbbc 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80016b6:	2320      	movs	r3, #32
 80016b8:	e004      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80016ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d105      	bne.n	80016de <HAL_ADC_ConfigChannel+0x19e>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	0e9b      	lsrs	r3, r3, #26
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	e018      	b.n	8001710 <HAL_ADC_ConfigChannel+0x1d0>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80016f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80016fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001702:	2320      	movs	r3, #32
 8001704:	e004      	b.n	8001710 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001706:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001710:	429a      	cmp	r2, r3
 8001712:	d106      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fb8b 	bl	8000e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2101      	movs	r1, #1
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fb6f 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10a      	bne.n	800174e <HAL_ADC_ConfigChannel+0x20e>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2101      	movs	r1, #1
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fb64 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001744:	4603      	mov	r3, r0
 8001746:	0e9b      	lsrs	r3, r3, #26
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	e01e      	b.n	800178c <HAL_ADC_ConfigChannel+0x24c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2101      	movs	r1, #1
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fb59 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001760:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001764:	fa93 f3a3 	rbit	r3, r3
 8001768:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800176c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001774:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800177c:	2320      	movs	r3, #32
 800177e:	e004      	b.n	800178a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001780:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x264>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	0e9b      	lsrs	r3, r3, #26
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	e018      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x296>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80017b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80017c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80017c8:	2320      	movs	r3, #32
 80017ca:	e004      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80017cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017d0:	fab3 f383 	clz	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d106      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2200      	movs	r2, #0
 80017e0:	2101      	movs	r1, #1
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fb28 	bl	8000e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2102      	movs	r1, #2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fb0c 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10a      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x2d4>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2102      	movs	r1, #2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fb01 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	0e9b      	lsrs	r3, r3, #26
 800180e:	f003 021f 	and.w	r2, r3, #31
 8001812:	e01e      	b.n	8001852 <HAL_ADC_ConfigChannel+0x312>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2102      	movs	r1, #2
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff faf6 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001832:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800183a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001842:	2320      	movs	r3, #32
 8001844:	e004      	b.n	8001850 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001846:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185a:	2b00      	cmp	r3, #0
 800185c:	d105      	bne.n	800186a <HAL_ADC_ConfigChannel+0x32a>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	0e9b      	lsrs	r3, r3, #26
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	e016      	b.n	8001898 <HAL_ADC_ConfigChannel+0x358>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800187c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800187e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001882:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800188a:	2320      	movs	r3, #32
 800188c:	e004      	b.n	8001898 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800188e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001898:	429a      	cmp	r2, r3
 800189a:	d106      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2200      	movs	r2, #0
 80018a2:	2102      	movs	r1, #2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fac7 	bl	8000e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2103      	movs	r1, #3
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff faab 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10a      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x396>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2103      	movs	r1, #3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff faa0 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	0e9b      	lsrs	r3, r3, #26
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	e017      	b.n	8001906 <HAL_ADC_ConfigChannel+0x3c6>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2103      	movs	r1, #3
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fa95 	bl	8000e0c <LL_ADC_GetOffsetChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80018ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018f0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80018f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80018f8:	2320      	movs	r3, #32
 80018fa:	e003      	b.n	8001904 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80018fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190e:	2b00      	cmp	r3, #0
 8001910:	d105      	bne.n	800191e <HAL_ADC_ConfigChannel+0x3de>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	0e9b      	lsrs	r3, r3, #26
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	e011      	b.n	8001942 <HAL_ADC_ConfigChannel+0x402>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800192c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800192e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001936:	2320      	movs	r3, #32
 8001938:	e003      	b.n	8001942 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800193a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001942:	429a      	cmp	r2, r3
 8001944:	d106      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2200      	movs	r2, #0
 800194c:	2103      	movs	r1, #3
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fa72 	bl	8000e38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fb87 	bl	800106c <LL_ADC_IsEnabled>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	f040 813f 	bne.w	8001be4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	6819      	ldr	r1, [r3, #0]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	461a      	mov	r2, r3
 8001974:	f7ff fae6 	bl	8000f44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4a8e      	ldr	r2, [pc, #568]	; (8001bb8 <HAL_ADC_ConfigChannel+0x678>)
 800197e:	4293      	cmp	r3, r2
 8001980:	f040 8130 	bne.w	8001be4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10b      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x46c>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0e9b      	lsrs	r3, r3, #26
 800199a:	3301      	adds	r3, #1
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	bf94      	ite	ls
 80019a4:	2301      	movls	r3, #1
 80019a6:	2300      	movhi	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	e019      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x4a0>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80019ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80019be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80019c4:	2320      	movs	r3, #32
 80019c6:	e003      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80019c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	3301      	adds	r3, #1
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	2b09      	cmp	r3, #9
 80019d8:	bf94      	ite	ls
 80019da:	2301      	movls	r3, #1
 80019dc:	2300      	movhi	r3, #0
 80019de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d079      	beq.n	8001ad8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d107      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x4c0>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	0e9b      	lsrs	r3, r3, #26
 80019f6:	3301      	adds	r3, #1
 80019f8:	069b      	lsls	r3, r3, #26
 80019fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019fe:	e015      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x4ec>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a10:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001a18:	2320      	movs	r3, #32
 8001a1a:	e003      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	069b      	lsls	r3, r3, #26
 8001a28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d109      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x50c>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0e9b      	lsrs	r3, r3, #26
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	2101      	movs	r1, #1
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	e017      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x53c>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001a64:	2320      	movs	r3, #32
 8001a66:	e003      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	3301      	adds	r3, #1
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	ea42 0103 	orr.w	r1, r2, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10a      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x562>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0e9b      	lsrs	r3, r3, #26
 8001a92:	3301      	adds	r3, #1
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	051b      	lsls	r3, r3, #20
 8001aa0:	e018      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x594>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001aba:	2320      	movs	r3, #32
 8001abc:	e003      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	e080      	b.n	8001bda <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d107      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x5b4>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	0e9b      	lsrs	r3, r3, #26
 8001aea:	3301      	adds	r3, #1
 8001aec:	069b      	lsls	r3, r3, #26
 8001aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001af2:	e015      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x5e0>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	e003      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	069b      	lsls	r3, r3, #26
 8001b1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d109      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x600>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0e9b      	lsrs	r3, r3, #26
 8001b32:	3301      	adds	r3, #1
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	e017      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x630>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	61fb      	str	r3, [r7, #28]
  return result;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	e003      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	ea42 0103 	orr.w	r1, r2, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10d      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x65c>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	3301      	adds	r3, #1
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	3b1e      	subs	r3, #30
 8001b94:	051b      	lsls	r3, r3, #20
 8001b96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	e01d      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x698>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	613b      	str	r3, [r7, #16]
  return result;
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d103      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	e005      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x684>
 8001bb8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	f003 021f 	and.w	r2, r3, #31
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b1e      	subs	r3, #30
 8001bd2:	051b      	lsls	r3, r3, #20
 8001bd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	6892      	ldr	r2, [r2, #8]
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7ff f984 	bl	8000eec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <HAL_ADC_ConfigChannel+0x7b8>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d079      	beq.n	8001ce4 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bf0:	4842      	ldr	r0, [pc, #264]	; (8001cfc <HAL_ADC_ConfigChannel+0x7bc>)
 8001bf2:	f7ff f8d9 	bl	8000da8 <LL_ADC_GetCommonPathInternalCh>
 8001bf6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a40      	ldr	r2, [pc, #256]	; (8001d00 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d12b      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d125      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a3b      	ldr	r2, [pc, #236]	; (8001d04 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d004      	beq.n	8001c24 <HAL_ADC_ConfigChannel+0x6e4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a3a      	ldr	r2, [pc, #232]	; (8001d08 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d15c      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4833      	ldr	r0, [pc, #204]	; (8001cfc <HAL_ADC_ConfigChannel+0x7bc>)
 8001c30:	f7ff f8a7 	bl	8000d82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c34:	4b35      	ldr	r3, [pc, #212]	; (8001d0c <HAL_ADC_ConfigChannel+0x7cc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	099b      	lsrs	r3, r3, #6
 8001c3a:	4a35      	ldr	r2, [pc, #212]	; (8001d10 <HAL_ADC_ConfigChannel+0x7d0>)
 8001c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c40:	099a      	lsrs	r2, r3, #6
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c4c:	e002      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f9      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c5a:	e040      	b.n	8001cde <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a2c      	ldr	r2, [pc, #176]	; (8001d14 <HAL_ADC_ConfigChannel+0x7d4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d118      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x758>
 8001c66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d112      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a23      	ldr	r2, [pc, #140]	; (8001d04 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d004      	beq.n	8001c86 <HAL_ADC_ConfigChannel+0x746>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d12d      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	4619      	mov	r1, r3
 8001c90:	481a      	ldr	r0, [pc, #104]	; (8001cfc <HAL_ADC_ConfigChannel+0x7bc>)
 8001c92:	f7ff f876 	bl	8000d82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c96:	e024      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d120      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ca2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d11a      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <HAL_ADC_ConfigChannel+0x7c4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d115      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	480e      	ldr	r0, [pc, #56]	; (8001cfc <HAL_ADC_ConfigChannel+0x7bc>)
 8001cc4:	f7ff f85d 	bl	8000d82 <LL_ADC_SetCommonPathInternalCh>
 8001cc8:	e00c      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cce:	f043 0220 	orr.w	r2, r3, #32
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001cdc:	e002      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cde:	bf00      	nop
 8001ce0:	e000      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ce2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001cec:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	37d8      	adds	r7, #216	; 0xd8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	80080000 	.word	0x80080000
 8001cfc:	50040300 	.word	0x50040300
 8001d00:	c7520000 	.word	0xc7520000
 8001d04:	50040000 	.word	0x50040000
 8001d08:	50040200 	.word	0x50040200
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	053e2d63 	.word	0x053e2d63
 8001d14:	cb840000 	.word	0xcb840000
 8001d18:	80000001 	.word	0x80000001

08001d1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f99f 	bl	800106c <LL_ADC_IsEnabled>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d146      	bne.n	8001dc2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <ADC_Enable+0xb0>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00d      	beq.n	8001d5e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d46:	f043 0210 	orr.w	r2, r3, #16
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	f043 0201 	orr.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e032      	b.n	8001dc4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff f96e 	bl	8001044 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001d68:	f7fe ffec 	bl	8000d44 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d6e:	e021      	b.n	8001db4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f979 	bl	800106c <LL_ADC_IsEnabled>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d104      	bne.n	8001d8a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff f95d 	bl	8001044 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d8a:	f7fe ffdb 	bl	8000d44 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d90d      	bls.n	8001db4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9c:	f043 0210 	orr.w	r2, r3, #16
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e007      	b.n	8001dc4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d1d6      	bne.n	8001d70 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	8000003f 	.word	0x8000003f

08001dd0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d14b      	bne.n	8001e82 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d021      	beq.n	8001e48 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff f830 	bl	8000e6e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d032      	beq.n	8001e7a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d12b      	bne.n	8001e7a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d11f      	bne.n	8001e7a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3e:	f043 0201 	orr.w	r2, r3, #1
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
 8001e46:	e018      	b.n	8001e7a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d111      	bne.n	8001e7a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d105      	bne.n	8001e7a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	f043 0201 	orr.w	r2, r3, #1
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f7fe fd38 	bl	80008f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e80:	e00e      	b.n	8001ea0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f7ff fb4c 	bl	800152c <HAL_ADC_ErrorCallback>
}
 8001e94:	e004      	b.n	8001ea0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	4798      	blx	r3
}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f7ff fb2e 	bl	8001518 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	f043 0204 	orr.w	r2, r3, #4
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7ff fb1e 	bl	800152c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <LL_ADC_IsEnabled>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <LL_ADC_IsEnabled+0x18>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <LL_ADC_IsEnabled+0x1a>
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <LL_ADC_REG_IsConversionOngoing>:
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d101      	bne.n	8001f36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b09f      	sub	sp, #124	; 0x7c
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e08f      	b.n	8002082 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a47      	ldr	r2, [pc, #284]	; (800208c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d102      	bne.n	8001f7a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001f74:	4b46      	ldr	r3, [pc, #280]	; (8002090 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	e001      	b.n	8001f7e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10b      	bne.n	8001f9c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f88:	f043 0220 	orr.w	r2, r3, #32
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e072      	b.n	8002082 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ffbd 	bl	8001f1e <LL_ADC_REG_IsConversionOngoing>
 8001fa4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ffb7 	bl	8001f1e <LL_ADC_REG_IsConversionOngoing>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d154      	bne.n	8002060 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001fb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d151      	bne.n	8002060 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001fbc:	4b35      	ldr	r3, [pc, #212]	; (8002094 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001fbe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d02c      	beq.n	8002022 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fda:	035b      	lsls	r3, r3, #13
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fe4:	4829      	ldr	r0, [pc, #164]	; (800208c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001fe6:	f7ff ff87 	bl	8001ef8 <LL_ADC_IsEnabled>
 8001fea:	4604      	mov	r4, r0
 8001fec:	4828      	ldr	r0, [pc, #160]	; (8002090 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001fee:	f7ff ff83 	bl	8001ef8 <LL_ADC_IsEnabled>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	431c      	orrs	r4, r3
 8001ff6:	4828      	ldr	r0, [pc, #160]	; (8002098 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ff8:	f7ff ff7e 	bl	8001ef8 <LL_ADC_IsEnabled>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4323      	orrs	r3, r4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d137      	bne.n	8002074 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800200c:	f023 030f 	bic.w	r3, r3, #15
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	6811      	ldr	r1, [r2, #0]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	6892      	ldr	r2, [r2, #8]
 8002018:	430a      	orrs	r2, r1
 800201a:	431a      	orrs	r2, r3
 800201c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800201e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002020:	e028      	b.n	8002074 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800202a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800202e:	4817      	ldr	r0, [pc, #92]	; (800208c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002030:	f7ff ff62 	bl	8001ef8 <LL_ADC_IsEnabled>
 8002034:	4604      	mov	r4, r0
 8002036:	4816      	ldr	r0, [pc, #88]	; (8002090 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002038:	f7ff ff5e 	bl	8001ef8 <LL_ADC_IsEnabled>
 800203c:	4603      	mov	r3, r0
 800203e:	431c      	orrs	r4, r3
 8002040:	4815      	ldr	r0, [pc, #84]	; (8002098 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002042:	f7ff ff59 	bl	8001ef8 <LL_ADC_IsEnabled>
 8002046:	4603      	mov	r3, r0
 8002048:	4323      	orrs	r3, r4
 800204a:	2b00      	cmp	r3, #0
 800204c:	d112      	bne.n	8002074 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800204e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002056:	f023 030f 	bic.w	r3, r3, #15
 800205a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800205c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800205e:	e009      	b.n	8002074 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	f043 0220 	orr.w	r2, r3, #32
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002072:	e000      	b.n	8002076 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002074:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800207e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002082:	4618      	mov	r0, r3
 8002084:	377c      	adds	r7, #124	; 0x7c
 8002086:	46bd      	mov	sp, r7
 8002088:	bd90      	pop	{r4, r7, pc}
 800208a:	bf00      	nop
 800208c:	50040000 	.word	0x50040000
 8002090:	50040100 	.word	0x50040100
 8002094:	50040300 	.word	0x50040300
 8002098:	50040200 	.word	0x50040200

0800209c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b8:	4013      	ands	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ce:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	60d3      	str	r3, [r2, #12]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <__NVIC_GetPriorityGrouping+0x18>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 0307 	and.w	r3, r3, #7
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	2b00      	cmp	r3, #0
 8002110:	db0b      	blt.n	800212a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	f003 021f 	and.w	r2, r3, #31
 8002118:	4907      	ldr	r1, [pc, #28]	; (8002138 <__NVIC_EnableIRQ+0x38>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	2001      	movs	r0, #1
 8002122:	fa00 f202 	lsl.w	r2, r0, r2
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	; (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	; (800218c <__NVIC_SetPriority+0x50>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	4313      	orrs	r3, r2
         );
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002208:	d301      	bcc.n	800220e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220a:	2301      	movs	r3, #1
 800220c:	e00f      	b.n	800222e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <SysTick_Config+0x40>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002216:	210f      	movs	r1, #15
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f7ff ff8e 	bl	800213c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <SysTick_Config+0x40>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <SysTick_Config+0x40>)
 8002228:	2207      	movs	r2, #7
 800222a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	e000e010 	.word	0xe000e010

0800223c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff29 	bl	800209c <__NVIC_SetPriorityGrouping>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002264:	f7ff ff3e 	bl	80020e4 <__NVIC_GetPriorityGrouping>
 8002268:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f7ff ff8e 	bl	8002190 <NVIC_EncodePriority>
 8002274:	4602      	mov	r2, r0
 8002276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff5d 	bl	800213c <__NVIC_SetPriority>
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff31 	bl	8002100 <__NVIC_EnableIRQ>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffa2 	bl	80021f8 <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e098      	b.n	8002404 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	4b4d      	ldr	r3, [pc, #308]	; (8002410 <HAL_DMA_Init+0x150>)
 80022da:	429a      	cmp	r2, r3
 80022dc:	d80f      	bhi.n	80022fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <HAL_DMA_Init+0x154>)
 80022e6:	4413      	add	r3, r2
 80022e8:	4a4b      	ldr	r2, [pc, #300]	; (8002418 <HAL_DMA_Init+0x158>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	009a      	lsls	r2, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a48      	ldr	r2, [pc, #288]	; (800241c <HAL_DMA_Init+0x15c>)
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
 80022fc:	e00e      	b.n	800231c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	4b46      	ldr	r3, [pc, #280]	; (8002420 <HAL_DMA_Init+0x160>)
 8002306:	4413      	add	r3, r2
 8002308:	4a43      	ldr	r2, [pc, #268]	; (8002418 <HAL_DMA_Init+0x158>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	009a      	lsls	r2, r3, #2
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a42      	ldr	r2, [pc, #264]	; (8002424 <HAL_DMA_Init+0x164>)
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002336:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002340:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002358:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002376:	d039      	beq.n	80023ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	4a27      	ldr	r2, [pc, #156]	; (800241c <HAL_DMA_Init+0x15c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d11a      	bne.n	80023b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002382:	4b29      	ldr	r3, [pc, #164]	; (8002428 <HAL_DMA_Init+0x168>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f003 031c 	and.w	r3, r3, #28
 800238e:	210f      	movs	r1, #15
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	4924      	ldr	r1, [pc, #144]	; (8002428 <HAL_DMA_Init+0x168>)
 8002398:	4013      	ands	r3, r2
 800239a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_DMA_Init+0x168>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a8:	f003 031c 	and.w	r3, r3, #28
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	491d      	ldr	r1, [pc, #116]	; (8002428 <HAL_DMA_Init+0x168>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]
 80023b6:	e019      	b.n	80023ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80023b8:	4b1c      	ldr	r3, [pc, #112]	; (800242c <HAL_DMA_Init+0x16c>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	f003 031c 	and.w	r3, r3, #28
 80023c4:	210f      	movs	r1, #15
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	4917      	ldr	r1, [pc, #92]	; (800242c <HAL_DMA_Init+0x16c>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <HAL_DMA_Init+0x16c>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	f003 031c 	and.w	r3, r3, #28
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	4911      	ldr	r1, [pc, #68]	; (800242c <HAL_DMA_Init+0x16c>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40020407 	.word	0x40020407
 8002414:	bffdfff8 	.word	0xbffdfff8
 8002418:	cccccccd 	.word	0xcccccccd
 800241c:	40020000 	.word	0x40020000
 8002420:	bffdfbf8 	.word	0xbffdfbf8
 8002424:	40020400 	.word	0x40020400
 8002428:	400200a8 	.word	0x400200a8
 800242c:	400204a8 	.word	0x400204a8

08002430 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_DMA_Start_IT+0x20>
 800244c:	2302      	movs	r3, #2
 800244e:	e04b      	b.n	80024e8 <HAL_DMA_Start_IT+0xb8>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d13a      	bne.n	80024da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0201 	bic.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f8e0 	bl	800264e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 020e 	orr.w	r2, r2, #14
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e00f      	b.n	80024c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0204 	bic.w	r2, r2, #4
 80024b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 020a 	orr.w	r2, r2, #10
 80024c6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e005      	b.n	80024e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
 80024e4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80024e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	f003 031c 	and.w	r3, r3, #28
 8002510:	2204      	movs	r2, #4
 8002512:	409a      	lsls	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d026      	beq.n	800256a <HAL_DMA_IRQHandler+0x7a>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d021      	beq.n	800256a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0204 	bic.w	r2, r2, #4
 8002542:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002548:	f003 021c 	and.w	r2, r3, #28
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	2104      	movs	r1, #4
 8002552:	fa01 f202 	lsl.w	r2, r1, r2
 8002556:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	2b00      	cmp	r3, #0
 800255e:	d071      	beq.n	8002644 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002568:	e06c      	b.n	8002644 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f003 031c 	and.w	r3, r3, #28
 8002572:	2202      	movs	r2, #2
 8002574:	409a      	lsls	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d02e      	beq.n	80025dc <HAL_DMA_IRQHandler+0xec>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d029      	beq.n	80025dc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10b      	bne.n	80025ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 020a 	bic.w	r2, r2, #10
 80025a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 021c 	and.w	r2, r3, #28
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2102      	movs	r1, #2
 80025bc:	fa01 f202 	lsl.w	r2, r1, r2
 80025c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d038      	beq.n	8002644 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025da:	e033      	b.n	8002644 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f003 031c 	and.w	r3, r3, #28
 80025e4:	2208      	movs	r2, #8
 80025e6:	409a      	lsls	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d02a      	beq.n	8002646 <HAL_DMA_IRQHandler+0x156>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d025      	beq.n	8002646 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 020e 	bic.w	r2, r2, #14
 8002608:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f003 021c 	and.w	r2, r3, #28
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f202 	lsl.w	r2, r1, r2
 800261c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002638:	2b00      	cmp	r3, #0
 800263a:	d004      	beq.n	8002646 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002644:	bf00      	nop
 8002646:	bf00      	nop
}
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800264e:	b480      	push	{r7}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	f003 021c 	and.w	r2, r3, #28
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f202 	lsl.w	r2, r1, r2
 800266e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b10      	cmp	r3, #16
 800267e:	d108      	bne.n	8002692 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002690:	e007      	b.n	80026a2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	60da      	str	r2, [r3, #12]
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026be:	e17f      	b.n	80029c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2101      	movs	r1, #1
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	4013      	ands	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8171 	beq.w	80029ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d00b      	beq.n	80026f8 <HAL_GPIO_Init+0x48>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d007      	beq.n	80026f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ec:	2b11      	cmp	r3, #17
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b12      	cmp	r3, #18
 80026f6:	d130      	bne.n	800275a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800272e:	2201      	movs	r2, #1
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 0201 	and.w	r2, r3, #1
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b03      	cmp	r3, #3
 8002764:	d118      	bne.n	8002798 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800276c:	2201      	movs	r2, #1
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	08db      	lsrs	r3, r3, #3
 8002782:	f003 0201 	and.w	r2, r3, #1
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x128>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b12      	cmp	r3, #18
 80027d6:	d123      	bne.n	8002820 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	220f      	movs	r2, #15
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	08da      	lsrs	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3208      	adds	r2, #8
 800281a:	6939      	ldr	r1, [r7, #16]
 800281c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0203 	and.w	r2, r3, #3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80ac 	beq.w	80029ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	4b5e      	ldr	r3, [pc, #376]	; (80029dc <HAL_GPIO_Init+0x32c>)
 8002864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002866:	4a5d      	ldr	r2, [pc, #372]	; (80029dc <HAL_GPIO_Init+0x32c>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6613      	str	r3, [r2, #96]	; 0x60
 800286e:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <HAL_GPIO_Init+0x32c>)
 8002870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800287a:	4a59      	ldr	r2, [pc, #356]	; (80029e0 <HAL_GPIO_Init+0x330>)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	3302      	adds	r3, #2
 8002882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002886:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	220f      	movs	r2, #15
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028a4:	d025      	beq.n	80028f2 <HAL_GPIO_Init+0x242>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4e      	ldr	r2, [pc, #312]	; (80029e4 <HAL_GPIO_Init+0x334>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d01f      	beq.n	80028ee <HAL_GPIO_Init+0x23e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4d      	ldr	r2, [pc, #308]	; (80029e8 <HAL_GPIO_Init+0x338>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d019      	beq.n	80028ea <HAL_GPIO_Init+0x23a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4c      	ldr	r2, [pc, #304]	; (80029ec <HAL_GPIO_Init+0x33c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d013      	beq.n	80028e6 <HAL_GPIO_Init+0x236>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4b      	ldr	r2, [pc, #300]	; (80029f0 <HAL_GPIO_Init+0x340>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00d      	beq.n	80028e2 <HAL_GPIO_Init+0x232>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4a      	ldr	r2, [pc, #296]	; (80029f4 <HAL_GPIO_Init+0x344>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d007      	beq.n	80028de <HAL_GPIO_Init+0x22e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a49      	ldr	r2, [pc, #292]	; (80029f8 <HAL_GPIO_Init+0x348>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d101      	bne.n	80028da <HAL_GPIO_Init+0x22a>
 80028d6:	2306      	movs	r3, #6
 80028d8:	e00c      	b.n	80028f4 <HAL_GPIO_Init+0x244>
 80028da:	2307      	movs	r3, #7
 80028dc:	e00a      	b.n	80028f4 <HAL_GPIO_Init+0x244>
 80028de:	2305      	movs	r3, #5
 80028e0:	e008      	b.n	80028f4 <HAL_GPIO_Init+0x244>
 80028e2:	2304      	movs	r3, #4
 80028e4:	e006      	b.n	80028f4 <HAL_GPIO_Init+0x244>
 80028e6:	2303      	movs	r3, #3
 80028e8:	e004      	b.n	80028f4 <HAL_GPIO_Init+0x244>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e002      	b.n	80028f4 <HAL_GPIO_Init+0x244>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_GPIO_Init+0x244>
 80028f2:	2300      	movs	r3, #0
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	f002 0203 	and.w	r2, r2, #3
 80028fa:	0092      	lsls	r2, r2, #2
 80028fc:	4093      	lsls	r3, r2
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002904:	4936      	ldr	r1, [pc, #216]	; (80029e0 <HAL_GPIO_Init+0x330>)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	3302      	adds	r3, #2
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002912:	4b3a      	ldr	r3, [pc, #232]	; (80029fc <HAL_GPIO_Init+0x34c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43db      	mvns	r3, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002936:	4a31      	ldr	r2, [pc, #196]	; (80029fc <HAL_GPIO_Init+0x34c>)
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800293c:	4b2f      	ldr	r3, [pc, #188]	; (80029fc <HAL_GPIO_Init+0x34c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	43db      	mvns	r3, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002960:	4a26      	ldr	r2, [pc, #152]	; (80029fc <HAL_GPIO_Init+0x34c>)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002966:	4b25      	ldr	r3, [pc, #148]	; (80029fc <HAL_GPIO_Init+0x34c>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800298a:	4a1c      	ldr	r2, [pc, #112]	; (80029fc <HAL_GPIO_Init+0x34c>)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002990:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <HAL_GPIO_Init+0x34c>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029b4:	4a11      	ldr	r2, [pc, #68]	; (80029fc <HAL_GPIO_Init+0x34c>)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	3301      	adds	r3, #1
 80029be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f47f ae78 	bne.w	80026c0 <HAL_GPIO_Init+0x10>
  }
}
 80029d0:	bf00      	nop
 80029d2:	371c      	adds	r7, #28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40010000 	.word	0x40010000
 80029e4:	48000400 	.word	0x48000400
 80029e8:	48000800 	.word	0x48000800
 80029ec:	48000c00 	.word	0x48000c00
 80029f0:	48001000 	.word	0x48001000
 80029f4:	48001400 	.word	0x48001400
 80029f8:	48001800 	.word	0x48001800
 80029fc:	40010400 	.word	0x40010400

08002a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a10:	787b      	ldrb	r3, [r7, #1]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a1c:	e002      	b.n	8002a24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a1e:	887a      	ldrh	r2, [r7, #2]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40007000 	.word	0x40007000

08002a4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a5a:	d130      	bne.n	8002abe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a5c:	4b23      	ldr	r3, [pc, #140]	; (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a68:	d038      	beq.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a72:	4a1e      	ldr	r2, [pc, #120]	; (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2232      	movs	r2, #50	; 0x32
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	0c9b      	lsrs	r3, r3, #18
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a90:	e002      	b.n	8002a98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa4:	d102      	bne.n	8002aac <HAL_PWREx_ControlVoltageScaling+0x60>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f2      	bne.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab8:	d110      	bne.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e00f      	b.n	8002ade <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002abe:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aca:	d007      	beq.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002acc:	4b07      	ldr	r3, [pc, #28]	; (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ad4:	4a05      	ldr	r2, [pc, #20]	; (8002aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ada:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40007000 	.word	0x40007000
 8002af0:	20000000 	.word	0x20000000
 8002af4:	431bde83 	.word	0x431bde83

08002af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e3d4      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b0a:	4ba1      	ldr	r3, [pc, #644]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b14:	4b9e      	ldr	r3, [pc, #632]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 80e4 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_RCC_OscConfig+0x4a>
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	f040 808b 	bne.w	8002c50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	f040 8087 	bne.w	8002c50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b42:	4b93      	ldr	r3, [pc, #588]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <HAL_RCC_OscConfig+0x62>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e3ac      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1a      	ldr	r2, [r3, #32]
 8002b5e:	4b8c      	ldr	r3, [pc, #560]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_RCC_OscConfig+0x7c>
 8002b6a:	4b89      	ldr	r3, [pc, #548]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b72:	e005      	b.n	8002b80 <HAL_RCC_OscConfig+0x88>
 8002b74:	4b86      	ldr	r3, [pc, #536]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d223      	bcs.n	8002bcc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fd3f 	bl	800360c <RCC_SetFlashLatencyFromMSIRange>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e38d      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b98:	4b7d      	ldr	r3, [pc, #500]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a7c      	ldr	r2, [pc, #496]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b7a      	ldr	r3, [pc, #488]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	4977      	ldr	r1, [pc, #476]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb6:	4b76      	ldr	r3, [pc, #472]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	4972      	ldr	r1, [pc, #456]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
 8002bca:	e025      	b.n	8002c18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bcc:	4b70      	ldr	r3, [pc, #448]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a6f      	ldr	r2, [pc, #444]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002bd2:	f043 0308 	orr.w	r3, r3, #8
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b6d      	ldr	r3, [pc, #436]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	496a      	ldr	r1, [pc, #424]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bea:	4b69      	ldr	r3, [pc, #420]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	4965      	ldr	r1, [pc, #404]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fcff 	bl	800360c <RCC_SetFlashLatencyFromMSIRange>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e34d      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c18:	f000 fc36 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 8002c1c:	4601      	mov	r1, r0
 8002c1e:	4b5c      	ldr	r3, [pc, #368]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	091b      	lsrs	r3, r3, #4
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	4a5a      	ldr	r2, [pc, #360]	; (8002d94 <HAL_RCC_OscConfig+0x29c>)
 8002c2a:	5cd3      	ldrb	r3, [r2, r3]
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	fa21 f303 	lsr.w	r3, r1, r3
 8002c34:	4a58      	ldr	r2, [pc, #352]	; (8002d98 <HAL_RCC_OscConfig+0x2a0>)
 8002c36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c38:	4b58      	ldr	r3, [pc, #352]	; (8002d9c <HAL_RCC_OscConfig+0x2a4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe f831 	bl	8000ca4 <HAL_InitTick>
 8002c42:	4603      	mov	r3, r0
 8002c44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d052      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	e331      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d032      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c58:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4c      	ldr	r2, [pc, #304]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c64:	f7fe f86e 	bl	8000d44 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c6c:	f7fe f86a 	bl	8000d44 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e31a      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c7e:	4b44      	ldr	r3, [pc, #272]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c8a:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a40      	ldr	r2, [pc, #256]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002c90:	f043 0308 	orr.w	r3, r3, #8
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b3e      	ldr	r3, [pc, #248]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	493b      	ldr	r1, [pc, #236]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca8:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	4936      	ldr	r1, [pc, #216]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
 8002cbc:	e01a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cbe:	4b34      	ldr	r3, [pc, #208]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a33      	ldr	r2, [pc, #204]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cca:	f7fe f83b 	bl	8000d44 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cd2:	f7fe f837 	bl	8000d44 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e2e7      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f0      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x1da>
 8002cf0:	e000      	b.n	8002cf4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cf2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d074      	beq.n	8002dea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d005      	beq.n	8002d12 <HAL_RCC_OscConfig+0x21a>
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b0c      	cmp	r3, #12
 8002d0a:	d10e      	bne.n	8002d2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d10b      	bne.n	8002d2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d12:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d064      	beq.n	8002de8 <HAL_RCC_OscConfig+0x2f0>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d160      	bne.n	8002de8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e2c4      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_OscConfig+0x24a>
 8002d34:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	e01d      	b.n	8002d7e <HAL_RCC_OscConfig+0x286>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d4a:	d10c      	bne.n	8002d66 <HAL_RCC_OscConfig+0x26e>
 8002d4c:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002d52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e00b      	b.n	8002d7e <HAL_RCC_OscConfig+0x286>
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a06      	ldr	r2, [pc, #24]	; (8002d90 <HAL_RCC_OscConfig+0x298>)
 8002d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01c      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fd ffdd 	bl	8000d44 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d8c:	e011      	b.n	8002db2 <HAL_RCC_OscConfig+0x2ba>
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	08004f7c 	.word	0x08004f7c
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da0:	f7fd ffd0 	bl	8000d44 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e280      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db2:	4baf      	ldr	r3, [pc, #700]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x2a8>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fd ffc0 	bl	8000d44 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fd ffbc 	bl	8000d44 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e26c      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dda:	4ba5      	ldr	r3, [pc, #660]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2d0>
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d060      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_OscConfig+0x310>
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b0c      	cmp	r3, #12
 8002e00:	d119      	bne.n	8002e36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d116      	bne.n	8002e36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e08:	4b99      	ldr	r3, [pc, #612]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_OscConfig+0x328>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e249      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e20:	4b93      	ldr	r3, [pc, #588]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	4990      	ldr	r1, [pc, #576]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e34:	e040      	b.n	8002eb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d023      	beq.n	8002e86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e3e:	4b8c      	ldr	r3, [pc, #560]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a8b      	ldr	r2, [pc, #556]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4a:	f7fd ff7b 	bl	8000d44 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e52:	f7fd ff77 	bl	8000d44 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e227      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e64:	4b82      	ldr	r3, [pc, #520]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e70:	4b7f      	ldr	r3, [pc, #508]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	061b      	lsls	r3, r3, #24
 8002e7e:	497c      	ldr	r1, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
 8002e84:	e018      	b.n	8002eb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e86:	4b7a      	ldr	r3, [pc, #488]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a79      	ldr	r2, [pc, #484]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7fd ff57 	bl	8000d44 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e9a:	f7fd ff53 	bl	8000d44 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e203      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eac:	4b70      	ldr	r3, [pc, #448]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f0      	bne.n	8002e9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d03c      	beq.n	8002f3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ecc:	4b68      	ldr	r3, [pc, #416]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed2:	4a67      	ldr	r2, [pc, #412]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fd ff32 	bl	8000d44 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee4:	f7fd ff2e 	bl	8000d44 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e1de      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef6:	4b5e      	ldr	r3, [pc, #376]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ef      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x3ec>
 8002f04:	e01b      	b.n	8002f3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f06:	4b5a      	ldr	r3, [pc, #360]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0c:	4a58      	ldr	r2, [pc, #352]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f16:	f7fd ff15 	bl	8000d44 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7fd ff11 	bl	8000d44 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e1c1      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f30:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1ef      	bne.n	8002f1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80a6 	beq.w	8003098 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f50:	4b47      	ldr	r3, [pc, #284]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10d      	bne.n	8002f78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5c:	4b44      	ldr	r3, [pc, #272]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	4a43      	ldr	r2, [pc, #268]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f66:	6593      	str	r3, [r2, #88]	; 0x58
 8002f68:	4b41      	ldr	r3, [pc, #260]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f74:	2301      	movs	r3, #1
 8002f76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f78:	4b3e      	ldr	r3, [pc, #248]	; (8003074 <HAL_RCC_OscConfig+0x57c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d118      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f84:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_RCC_OscConfig+0x57c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a3a      	ldr	r2, [pc, #232]	; (8003074 <HAL_RCC_OscConfig+0x57c>)
 8002f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f90:	f7fd fed8 	bl	8000d44 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f98:	f7fd fed4 	bl	8000d44 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e184      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002faa:	4b32      	ldr	r3, [pc, #200]	; (8003074 <HAL_RCC_OscConfig+0x57c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d108      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4d8>
 8002fbe:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc4:	4a2a      	ldr	r2, [pc, #168]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fce:	e024      	b.n	800301a <HAL_RCC_OscConfig+0x522>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	d110      	bne.n	8002ffa <HAL_RCC_OscConfig+0x502>
 8002fd8:	4b25      	ldr	r3, [pc, #148]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	4a24      	ldr	r2, [pc, #144]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fe8:	4b21      	ldr	r3, [pc, #132]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fee:	4a20      	ldr	r2, [pc, #128]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ff8:	e00f      	b.n	800301a <HAL_RCC_OscConfig+0x522>
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800300a:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	4a17      	ldr	r2, [pc, #92]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8003012:	f023 0304 	bic.w	r3, r3, #4
 8003016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d016      	beq.n	8003050 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fd fe8f 	bl	8000d44 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fd fe8b 	bl	8000d44 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e139      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0ed      	beq.n	800302a <HAL_RCC_OscConfig+0x532>
 800304e:	e01a      	b.n	8003086 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fd fe78 	bl	8000d44 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003056:	e00f      	b.n	8003078 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003058:	f7fd fe74 	bl	8000d44 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d906      	bls.n	8003078 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e122      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000
 8003074:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003078:	4b90      	ldr	r3, [pc, #576]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1e8      	bne.n	8003058 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003086:	7ffb      	ldrb	r3, [r7, #31]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d105      	bne.n	8003098 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308c:	4b8b      	ldr	r3, [pc, #556]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	4a8a      	ldr	r2, [pc, #552]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 8003092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003096:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8108 	beq.w	80032b2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	f040 80d0 	bne.w	800324c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030ac:	4b83      	ldr	r3, [pc, #524]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	429a      	cmp	r2, r3
 80030be:	d130      	bne.n	8003122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	3b01      	subs	r3, #1
 80030cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d127      	bne.n	8003122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d11f      	bne.n	8003122 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030ec:	2a07      	cmp	r2, #7
 80030ee:	bf14      	ite	ne
 80030f0:	2201      	movne	r2, #1
 80030f2:	2200      	moveq	r2, #0
 80030f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d113      	bne.n	8003122 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	3b01      	subs	r3, #1
 8003108:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d109      	bne.n	8003122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	3b01      	subs	r3, #1
 800311c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d06e      	beq.n	8003200 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b0c      	cmp	r3, #12
 8003126:	d069      	beq.n	80031fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003128:	4b64      	ldr	r3, [pc, #400]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003134:	4b61      	ldr	r3, [pc, #388]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0b7      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003144:	4b5d      	ldr	r3, [pc, #372]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a5c      	ldr	r2, [pc, #368]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 800314a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003150:	f7fd fdf8 	bl	8000d44 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003158:	f7fd fdf4 	bl	8000d44 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e0a4      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800316a:	4b54      	ldr	r3, [pc, #336]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003176:	4b51      	ldr	r3, [pc, #324]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	4b51      	ldr	r3, [pc, #324]	; (80032c0 <HAL_RCC_OscConfig+0x7c8>)
 800317c:	4013      	ands	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003186:	3a01      	subs	r2, #1
 8003188:	0112      	lsls	r2, r2, #4
 800318a:	4311      	orrs	r1, r2
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003190:	0212      	lsls	r2, r2, #8
 8003192:	4311      	orrs	r1, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003198:	0852      	lsrs	r2, r2, #1
 800319a:	3a01      	subs	r2, #1
 800319c:	0552      	lsls	r2, r2, #21
 800319e:	4311      	orrs	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031a4:	0852      	lsrs	r2, r2, #1
 80031a6:	3a01      	subs	r2, #1
 80031a8:	0652      	lsls	r2, r2, #25
 80031aa:	4311      	orrs	r1, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031b0:	0912      	lsrs	r2, r2, #4
 80031b2:	0452      	lsls	r2, r2, #17
 80031b4:	430a      	orrs	r2, r1
 80031b6:	4941      	ldr	r1, [pc, #260]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031bc:	4b3f      	ldr	r3, [pc, #252]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a3e      	ldr	r2, [pc, #248]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 80031c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031c8:	4b3c      	ldr	r3, [pc, #240]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a3b      	ldr	r2, [pc, #236]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 80031ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031d4:	f7fd fdb6 	bl	8000d44 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fd fdb2 	bl	8000d44 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e062      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ee:	4b33      	ldr	r3, [pc, #204]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031fa:	e05a      	b.n	80032b2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e059      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003200:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d152      	bne.n	80032b2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800320c:	4b2b      	ldr	r3, [pc, #172]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2a      	ldr	r2, [pc, #168]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 8003212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003216:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003218:	4b28      	ldr	r3, [pc, #160]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4a27      	ldr	r2, [pc, #156]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 800321e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003222:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003224:	f7fd fd8e 	bl	8000d44 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322c:	f7fd fd8a 	bl	8000d44 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e03a      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323e:	4b1f      	ldr	r3, [pc, #124]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x734>
 800324a:	e032      	b.n	80032b2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b0c      	cmp	r3, #12
 8003250:	d02d      	beq.n	80032ae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a19      	ldr	r2, [pc, #100]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 8003258:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800325c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	4a13      	ldr	r2, [pc, #76]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 8003270:	f023 0303 	bic.w	r3, r3, #3
 8003274:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	4a10      	ldr	r2, [pc, #64]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 800327c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003284:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fd fd5d 	bl	8000d44 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328e:	f7fd fd59 	bl	8000d44 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e009      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCC_OscConfig+0x7c4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f0      	bne.n	800328e <HAL_RCC_OscConfig+0x796>
 80032ac:	e001      	b.n	80032b2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000
 80032c0:	f99d808c 	.word	0xf99d808c

080032c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0c8      	b.n	800346a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	4b66      	ldr	r3, [pc, #408]	; (8003474 <HAL_RCC_ClockConfig+0x1b0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d910      	bls.n	8003308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b63      	ldr	r3, [pc, #396]	; (8003474 <HAL_RCC_ClockConfig+0x1b0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 0207 	bic.w	r2, r3, #7
 80032ee:	4961      	ldr	r1, [pc, #388]	; (8003474 <HAL_RCC_ClockConfig+0x1b0>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b5f      	ldr	r3, [pc, #380]	; (8003474 <HAL_RCC_ClockConfig+0x1b0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0b0      	b.n	800346a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d04c      	beq.n	80033ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d107      	bne.n	800332c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800331c:	4b56      	ldr	r3, [pc, #344]	; (8003478 <HAL_RCC_ClockConfig+0x1b4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d121      	bne.n	800336c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e09e      	b.n	800346a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d107      	bne.n	8003344 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003334:	4b50      	ldr	r3, [pc, #320]	; (8003478 <HAL_RCC_ClockConfig+0x1b4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d115      	bne.n	800336c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e092      	b.n	800346a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800334c:	4b4a      	ldr	r3, [pc, #296]	; (8003478 <HAL_RCC_ClockConfig+0x1b4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d109      	bne.n	800336c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e086      	b.n	800346a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800335c:	4b46      	ldr	r3, [pc, #280]	; (8003478 <HAL_RCC_ClockConfig+0x1b4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e07e      	b.n	800346a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800336c:	4b42      	ldr	r3, [pc, #264]	; (8003478 <HAL_RCC_ClockConfig+0x1b4>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f023 0203 	bic.w	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	493f      	ldr	r1, [pc, #252]	; (8003478 <HAL_RCC_ClockConfig+0x1b4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337e:	f7fd fce1 	bl	8000d44 <HAL_GetTick>
 8003382:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003384:	e00a      	b.n	800339c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003386:	f7fd fcdd 	bl	8000d44 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f241 3288 	movw	r2, #5000	; 0x1388
 8003394:	4293      	cmp	r3, r2
 8003396:	d901      	bls.n	800339c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e066      	b.n	800346a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339c:	4b36      	ldr	r3, [pc, #216]	; (8003478 <HAL_RCC_ClockConfig+0x1b4>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 020c 	and.w	r2, r3, #12
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d1eb      	bne.n	8003386 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ba:	4b2f      	ldr	r3, [pc, #188]	; (8003478 <HAL_RCC_ClockConfig+0x1b4>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	492c      	ldr	r1, [pc, #176]	; (8003478 <HAL_RCC_ClockConfig+0x1b4>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033cc:	4b29      	ldr	r3, [pc, #164]	; (8003474 <HAL_RCC_ClockConfig+0x1b0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d210      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b26      	ldr	r3, [pc, #152]	; (8003474 <HAL_RCC_ClockConfig+0x1b0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 0207 	bic.w	r2, r3, #7
 80033e2:	4924      	ldr	r1, [pc, #144]	; (8003474 <HAL_RCC_ClockConfig+0x1b0>)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_RCC_ClockConfig+0x1b0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e036      	b.n	800346a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003408:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_RCC_ClockConfig+0x1b4>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4918      	ldr	r1, [pc, #96]	; (8003478 <HAL_RCC_ClockConfig+0x1b4>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_RCC_ClockConfig+0x1b4>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4910      	ldr	r1, [pc, #64]	; (8003478 <HAL_RCC_ClockConfig+0x1b4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800343a:	f000 f825 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 800343e:	4601      	mov	r1, r0
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <HAL_RCC_ClockConfig+0x1b4>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	4a0c      	ldr	r2, [pc, #48]	; (800347c <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	5cd3      	ldrb	r3, [r2, r3]
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	fa21 f303 	lsr.w	r3, r1, r3
 8003456:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fc20 	bl	8000ca4 <HAL_InitTick>
 8003464:	4603      	mov	r3, r0
 8003466:	72fb      	strb	r3, [r7, #11]

  return status;
 8003468:	7afb      	ldrb	r3, [r7, #11]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40022000 	.word	0x40022000
 8003478:	40021000 	.word	0x40021000
 800347c:	08004f7c 	.word	0x08004f7c
 8003480:	20000000 	.word	0x20000000
 8003484:	20000004 	.word	0x20000004

08003488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	2300      	movs	r3, #0
 8003494:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003496:	4b3d      	ldr	r3, [pc, #244]	; (800358c <HAL_RCC_GetSysClockFreq+0x104>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a0:	4b3a      	ldr	r3, [pc, #232]	; (800358c <HAL_RCC_GetSysClockFreq+0x104>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x34>
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b0c      	cmp	r3, #12
 80034b4:	d121      	bne.n	80034fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d11e      	bne.n	80034fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034bc:	4b33      	ldr	r3, [pc, #204]	; (800358c <HAL_RCC_GetSysClockFreq+0x104>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d107      	bne.n	80034d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034c8:	4b30      	ldr	r3, [pc, #192]	; (800358c <HAL_RCC_GetSysClockFreq+0x104>)
 80034ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	e005      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034d8:	4b2c      	ldr	r3, [pc, #176]	; (800358c <HAL_RCC_GetSysClockFreq+0x104>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034e4:	4a2a      	ldr	r2, [pc, #168]	; (8003590 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10d      	bne.n	8003510 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d102      	bne.n	8003506 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003500:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	e004      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d101      	bne.n	8003510 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800350c:	4b22      	ldr	r3, [pc, #136]	; (8003598 <HAL_RCC_GetSysClockFreq+0x110>)
 800350e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	2b0c      	cmp	r3, #12
 8003514:	d133      	bne.n	800357e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003516:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_RCC_GetSysClockFreq+0x104>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d002      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0xa4>
 8003526:	2b03      	cmp	r3, #3
 8003528:	d003      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0xaa>
 800352a:	e005      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800352c:	4b19      	ldr	r3, [pc, #100]	; (8003594 <HAL_RCC_GetSysClockFreq+0x10c>)
 800352e:	617b      	str	r3, [r7, #20]
      break;
 8003530:	e005      	b.n	800353e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003532:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_GetSysClockFreq+0x110>)
 8003534:	617b      	str	r3, [r7, #20]
      break;
 8003536:	e002      	b.n	800353e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	617b      	str	r3, [r7, #20]
      break;
 800353c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800353e:	4b13      	ldr	r3, [pc, #76]	; (800358c <HAL_RCC_GetSysClockFreq+0x104>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	3301      	adds	r3, #1
 800354a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <HAL_RCC_GetSysClockFreq+0x104>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	fb02 f203 	mul.w	r2, r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003562:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003564:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_RCC_GetSysClockFreq+0x104>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	0e5b      	lsrs	r3, r3, #25
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	3301      	adds	r3, #1
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800357e:	69bb      	ldr	r3, [r7, #24]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3724      	adds	r7, #36	; 0x24
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	40021000 	.word	0x40021000
 8003590:	08004f94 	.word	0x08004f94
 8003594:	00f42400 	.word	0x00f42400
 8003598:	007a1200 	.word	0x007a1200

0800359c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a0:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000000 	.word	0x20000000

080035b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035b8:	f7ff fff0 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035bc:	4601      	mov	r1, r0
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4a04      	ldr	r2, [pc, #16]	; (80035dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ca:	5cd3      	ldrb	r3, [r2, r3]
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08004f8c 	.word	0x08004f8c

080035e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035e4:	f7ff ffda 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035e8:	4601      	mov	r1, r0
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	0adb      	lsrs	r3, r3, #11
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	4a04      	ldr	r2, [pc, #16]	; (8003608 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035f6:	5cd3      	ldrb	r3, [r2, r3]
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	08004f8c 	.word	0x08004f8c

0800360c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003624:	f7ff fa04 	bl	8002a30 <HAL_PWREx_GetVoltageRange>
 8003628:	6178      	str	r0, [r7, #20]
 800362a:	e014      	b.n	8003656 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	4a24      	ldr	r2, [pc, #144]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003636:	6593      	str	r3, [r2, #88]	; 0x58
 8003638:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003644:	f7ff f9f4 	bl	8002a30 <HAL_PWREx_GetVoltageRange>
 8003648:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	4a1d      	ldr	r2, [pc, #116]	; (80036c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003654:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d10b      	bne.n	8003676 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d919      	bls.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2ba0      	cmp	r3, #160	; 0xa0
 8003668:	d902      	bls.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800366a:	2302      	movs	r3, #2
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	e013      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003670:	2301      	movs	r3, #1
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	e010      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b80      	cmp	r3, #128	; 0x80
 800367a:	d902      	bls.n	8003682 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800367c:	2303      	movs	r3, #3
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	e00a      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d102      	bne.n	800368e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003688:	2302      	movs	r3, #2
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	e004      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b70      	cmp	r3, #112	; 0x70
 8003692:	d101      	bne.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003694:	2301      	movs	r3, #1
 8003696:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 0207 	bic.w	r2, r3, #7
 80036a0:	4909      	ldr	r1, [pc, #36]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40022000 	.word	0x40022000

080036cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d4:	2300      	movs	r3, #0
 80036d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036d8:	2300      	movs	r3, #0
 80036da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d03f      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f0:	d01c      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x60>
 80036f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f6:	d802      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x32>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00e      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80036fc:	e01f      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80036fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003702:	d003      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003704:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003708:	d01c      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800370a:	e018      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800370c:	4b85      	ldr	r3, [pc, #532]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	4a84      	ldr	r2, [pc, #528]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003716:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003718:	e015      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3304      	adds	r3, #4
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fab9 	bl	8003c98 <RCCEx_PLLSAI1_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800372a:	e00c      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3320      	adds	r3, #32
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fba0 	bl	8003e78 <RCCEx_PLLSAI2_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800373c:	e003      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	74fb      	strb	r3, [r7, #19]
      break;
 8003742:	e000      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003746:	7cfb      	ldrb	r3, [r7, #19]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10b      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800374c:	4b75      	ldr	r3, [pc, #468]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800375a:	4972      	ldr	r1, [pc, #456]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003762:	e001      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d03f      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800377c:	d01c      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800377e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003782:	d802      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00e      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003788:	e01f      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800378a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800378e:	d003      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003790:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003794:	d01c      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003796:	e018      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003798:	4b62      	ldr	r3, [pc, #392]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4a61      	ldr	r2, [pc, #388]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800379e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037a4:	e015      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3304      	adds	r3, #4
 80037aa:	2100      	movs	r1, #0
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fa73 	bl	8003c98 <RCCEx_PLLSAI1_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037b6:	e00c      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3320      	adds	r3, #32
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fb5a 	bl	8003e78 <RCCEx_PLLSAI2_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037c8:	e003      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	74fb      	strb	r3, [r7, #19]
      break;
 80037ce:	e000      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80037d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d2:	7cfb      	ldrb	r3, [r7, #19]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10b      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037d8:	4b52      	ldr	r3, [pc, #328]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037e6:	494f      	ldr	r1, [pc, #316]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037ee:	e001      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80a0 	beq.w	8003942 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003816:	2300      	movs	r3, #0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381c:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	4a40      	ldr	r2, [pc, #256]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003826:	6593      	str	r3, [r2, #88]	; 0x58
 8003828:	4b3e      	ldr	r3, [pc, #248]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003834:	2301      	movs	r3, #1
 8003836:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003838:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a3a      	ldr	r2, [pc, #232]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800383e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003842:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003844:	f7fd fa7e 	bl	8000d44 <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800384a:	e009      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384c:	f7fd fa7a 	bl	8000d44 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d902      	bls.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	74fb      	strb	r3, [r7, #19]
        break;
 800385e:	e005      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003860:	4b31      	ldr	r3, [pc, #196]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0ef      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d15c      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003872:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01f      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	429a      	cmp	r2, r3
 800388e:	d019      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003890:	4b24      	ldr	r3, [pc, #144]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800389c:	4b21      	ldr	r3, [pc, #132]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	4a20      	ldr	r2, [pc, #128]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038ac:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d016      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7fd fa39 	bl	8000d44 <HAL_GetTick>
 80038d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d4:	e00b      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d6:	f7fd fa35 	bl	8000d44 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d902      	bls.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	74fb      	strb	r3, [r7, #19]
            break;
 80038ec:	e006      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0ec      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80038fc:	7cfb      	ldrb	r3, [r7, #19]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003912:	4904      	ldr	r1, [pc, #16]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800391a:	e009      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	74bb      	strb	r3, [r7, #18]
 8003920:	e006      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000
 8003928:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	7cfb      	ldrb	r3, [r7, #19]
 800392e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003930:	7c7b      	ldrb	r3, [r7, #17]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d105      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003936:	4b9e      	ldr	r3, [pc, #632]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	4a9d      	ldr	r2, [pc, #628]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800393c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003940:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800394e:	4b98      	ldr	r3, [pc, #608]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	f023 0203 	bic.w	r2, r3, #3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	4994      	ldr	r1, [pc, #592]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003970:	4b8f      	ldr	r3, [pc, #572]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	f023 020c 	bic.w	r2, r3, #12
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	498c      	ldr	r1, [pc, #560]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003992:	4b87      	ldr	r3, [pc, #540]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	4983      	ldr	r1, [pc, #524]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039b4:	4b7e      	ldr	r3, [pc, #504]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	497b      	ldr	r1, [pc, #492]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039d6:	4b76      	ldr	r3, [pc, #472]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e4:	4972      	ldr	r1, [pc, #456]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039f8:	4b6d      	ldr	r3, [pc, #436]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	496a      	ldr	r1, [pc, #424]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a1a:	4b65      	ldr	r3, [pc, #404]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a28:	4961      	ldr	r1, [pc, #388]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a3c:	4b5c      	ldr	r3, [pc, #368]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4a:	4959      	ldr	r1, [pc, #356]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a5e:	4b54      	ldr	r3, [pc, #336]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6c:	4950      	ldr	r1, [pc, #320]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a80:	4b4b      	ldr	r3, [pc, #300]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8e:	4948      	ldr	r1, [pc, #288]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aa2:	4b43      	ldr	r3, [pc, #268]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	493f      	ldr	r1, [pc, #252]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d028      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ac4:	4b3a      	ldr	r3, [pc, #232]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad2:	4937      	ldr	r1, [pc, #220]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae4:	4b32      	ldr	r3, [pc, #200]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a31      	ldr	r2, [pc, #196]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aee:	60d3      	str	r3, [r2, #12]
 8003af0:	e011      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003afa:	d10c      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	2101      	movs	r1, #1
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 f8c8 	bl	8003c98 <RCCEx_PLLSAI1_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003b12:	7cfb      	ldrb	r3, [r7, #19]
 8003b14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d028      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b22:	4b23      	ldr	r3, [pc, #140]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b30:	491f      	ldr	r1, [pc, #124]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b40:	d106      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b42:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b4c:	60d3      	str	r3, [r2, #12]
 8003b4e:	e011      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	2101      	movs	r1, #1
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 f899 	bl	8003c98 <RCCEx_PLLSAI1_Config>
 8003b66:	4603      	mov	r3, r0
 8003b68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003b70:	7cfb      	ldrb	r3, [r7, #19]
 8003b72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d02b      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8e:	4908      	ldr	r1, [pc, #32]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b9e:	d109      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4a02      	ldr	r2, [pc, #8]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003baa:	60d3      	str	r3, [r2, #12]
 8003bac:	e014      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 f867 	bl	8003c98 <RCCEx_PLLSAI1_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bce:	7cfb      	ldrb	r3, [r7, #19]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d02f      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003be4:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf2:	4928      	ldr	r1, [pc, #160]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c02:	d10d      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	2102      	movs	r1, #2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f844 	bl	8003c98 <RCCEx_PLLSAI1_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d014      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	74bb      	strb	r3, [r7, #18]
 8003c1e:	e011      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3320      	adds	r3, #32
 8003c2e:	2102      	movs	r1, #2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 f921 	bl	8003e78 <RCCEx_PLLSAI2_Config>
 8003c36:	4603      	mov	r3, r0
 8003c38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c3a:	7cfb      	ldrb	r3, [r7, #19]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c50:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c5e:	490d      	ldr	r1, [pc, #52]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00b      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c72:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c82:	4904      	ldr	r1, [pc, #16]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000

08003c98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ca6:	4b73      	ldr	r3, [pc, #460]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d018      	beq.n	8003ce4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cb2:	4b70      	ldr	r3, [pc, #448]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0203 	and.w	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d10d      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
       ||
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cca:	4b6a      	ldr	r3, [pc, #424]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	091b      	lsrs	r3, r3, #4
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
       ||
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d044      	beq.n	8003d68 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
 8003ce2:	e041      	b.n	8003d68 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d00c      	beq.n	8003d06 <RCCEx_PLLSAI1_Config+0x6e>
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d013      	beq.n	8003d18 <RCCEx_PLLSAI1_Config+0x80>
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d120      	bne.n	8003d36 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cf4:	4b5f      	ldr	r3, [pc, #380]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d11d      	bne.n	8003d3c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d04:	e01a      	b.n	8003d3c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d06:	4b5b      	ldr	r3, [pc, #364]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d116      	bne.n	8003d40 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d16:	e013      	b.n	8003d40 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d18:	4b56      	ldr	r3, [pc, #344]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10f      	bne.n	8003d44 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d24:	4b53      	ldr	r3, [pc, #332]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d109      	bne.n	8003d44 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d34:	e006      	b.n	8003d44 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3a:	e004      	b.n	8003d46 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d3c:	bf00      	nop
 8003d3e:	e002      	b.n	8003d46 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d40:	bf00      	nop
 8003d42:	e000      	b.n	8003d46 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d44:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10d      	bne.n	8003d68 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d4c:	4b49      	ldr	r3, [pc, #292]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6819      	ldr	r1, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	430b      	orrs	r3, r1
 8003d62:	4944      	ldr	r1, [pc, #272]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d17d      	bne.n	8003e6a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d6e:	4b41      	ldr	r3, [pc, #260]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a40      	ldr	r2, [pc, #256]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7a:	f7fc ffe3 	bl	8000d44 <HAL_GetTick>
 8003d7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d80:	e009      	b.n	8003d96 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d82:	f7fc ffdf 	bl	8000d44 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d902      	bls.n	8003d96 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	73fb      	strb	r3, [r7, #15]
        break;
 8003d94:	e005      	b.n	8003da2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d96:	4b37      	ldr	r3, [pc, #220]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1ef      	bne.n	8003d82 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d160      	bne.n	8003e6a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d111      	bne.n	8003dd2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dae:	4b31      	ldr	r3, [pc, #196]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6892      	ldr	r2, [r2, #8]
 8003dbe:	0211      	lsls	r1, r2, #8
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	68d2      	ldr	r2, [r2, #12]
 8003dc4:	0912      	lsrs	r2, r2, #4
 8003dc6:	0452      	lsls	r2, r2, #17
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	492a      	ldr	r1, [pc, #168]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	610b      	str	r3, [r1, #16]
 8003dd0:	e027      	b.n	8003e22 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d112      	bne.n	8003dfe <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dd8:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003de0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6892      	ldr	r2, [r2, #8]
 8003de8:	0211      	lsls	r1, r2, #8
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6912      	ldr	r2, [r2, #16]
 8003dee:	0852      	lsrs	r2, r2, #1
 8003df0:	3a01      	subs	r2, #1
 8003df2:	0552      	lsls	r2, r2, #21
 8003df4:	430a      	orrs	r2, r1
 8003df6:	491f      	ldr	r1, [pc, #124]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	610b      	str	r3, [r1, #16]
 8003dfc:	e011      	b.n	8003e22 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6892      	ldr	r2, [r2, #8]
 8003e0e:	0211      	lsls	r1, r2, #8
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6952      	ldr	r2, [r2, #20]
 8003e14:	0852      	lsrs	r2, r2, #1
 8003e16:	3a01      	subs	r2, #1
 8003e18:	0652      	lsls	r2, r2, #25
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	4915      	ldr	r1, [pc, #84]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e22:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2e:	f7fc ff89 	bl	8000d44 <HAL_GetTick>
 8003e32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e34:	e009      	b.n	8003e4a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e36:	f7fc ff85 	bl	8000d44 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d902      	bls.n	8003e4a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	73fb      	strb	r3, [r7, #15]
          break;
 8003e48:	e005      	b.n	8003e56 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0ef      	beq.n	8003e36 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	4903      	ldr	r1, [pc, #12]	; (8003e74 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40021000 	.word	0x40021000

08003e78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e86:	4b68      	ldr	r3, [pc, #416]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d018      	beq.n	8003ec4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e92:	4b65      	ldr	r3, [pc, #404]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0203 	and.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d10d      	bne.n	8003ebe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003eaa:	4b5f      	ldr	r3, [pc, #380]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
       ||
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d044      	beq.n	8003f48 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
 8003ec2:	e041      	b.n	8003f48 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d00c      	beq.n	8003ee6 <RCCEx_PLLSAI2_Config+0x6e>
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d013      	beq.n	8003ef8 <RCCEx_PLLSAI2_Config+0x80>
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d120      	bne.n	8003f16 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ed4:	4b54      	ldr	r3, [pc, #336]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d11d      	bne.n	8003f1c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee4:	e01a      	b.n	8003f1c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ee6:	4b50      	ldr	r3, [pc, #320]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d116      	bne.n	8003f20 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef6:	e013      	b.n	8003f20 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ef8:	4b4b      	ldr	r3, [pc, #300]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10f      	bne.n	8003f24 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f04:	4b48      	ldr	r3, [pc, #288]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d109      	bne.n	8003f24 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f14:	e006      	b.n	8003f24 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
      break;
 8003f1a:	e004      	b.n	8003f26 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f1c:	bf00      	nop
 8003f1e:	e002      	b.n	8003f26 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f20:	bf00      	nop
 8003f22:	e000      	b.n	8003f26 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003f24:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10d      	bne.n	8003f48 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f2c:	4b3e      	ldr	r3, [pc, #248]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6819      	ldr	r1, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	430b      	orrs	r3, r1
 8003f42:	4939      	ldr	r1, [pc, #228]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d167      	bne.n	800401e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f4e:	4b36      	ldr	r3, [pc, #216]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a35      	ldr	r2, [pc, #212]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f5a:	f7fc fef3 	bl	8000d44 <HAL_GetTick>
 8003f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f60:	e009      	b.n	8003f76 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f62:	f7fc feef 	bl	8000d44 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d902      	bls.n	8003f76 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	73fb      	strb	r3, [r7, #15]
        break;
 8003f74:	e005      	b.n	8003f82 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f76:	4b2c      	ldr	r3, [pc, #176]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1ef      	bne.n	8003f62 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d14a      	bne.n	800401e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d111      	bne.n	8003fb2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f8e:	4b26      	ldr	r3, [pc, #152]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6892      	ldr	r2, [r2, #8]
 8003f9e:	0211      	lsls	r1, r2, #8
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68d2      	ldr	r2, [r2, #12]
 8003fa4:	0912      	lsrs	r2, r2, #4
 8003fa6:	0452      	lsls	r2, r2, #17
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	491f      	ldr	r1, [pc, #124]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	614b      	str	r3, [r1, #20]
 8003fb0:	e011      	b.n	8003fd6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fb2:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6892      	ldr	r2, [r2, #8]
 8003fc2:	0211      	lsls	r1, r2, #8
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6912      	ldr	r2, [r2, #16]
 8003fc8:	0852      	lsrs	r2, r2, #1
 8003fca:	3a01      	subs	r2, #1
 8003fcc:	0652      	lsls	r2, r2, #25
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	4915      	ldr	r1, [pc, #84]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a13      	ldr	r2, [pc, #76]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe2:	f7fc feaf 	bl	8000d44 <HAL_GetTick>
 8003fe6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fe8:	e009      	b.n	8003ffe <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fea:	f7fc feab 	bl	8000d44 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d902      	bls.n	8003ffe <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	73fb      	strb	r3, [r7, #15]
          break;
 8003ffc:	e005      	b.n	800400a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0ef      	beq.n	8003fea <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d106      	bne.n	800401e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004012:	695a      	ldr	r2, [r3, #20]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	4903      	ldr	r1, [pc, #12]	; (8004028 <RCCEx_PLLSAI2_Config+0x1b0>)
 800401a:	4313      	orrs	r3, r2
 800401c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800401e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40021000 	.word	0x40021000

0800402c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e049      	b.n	80040d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d106      	bne.n	8004058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fc fd4a 	bl	8000aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3304      	adds	r3, #4
 8004068:	4619      	mov	r1, r3
 800406a:	4610      	mov	r0, r2
 800406c:	f000 f958 	bl	8004320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d001      	beq.n	80040f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e047      	b.n	8004184 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a23      	ldr	r2, [pc, #140]	; (8004190 <HAL_TIM_Base_Start+0xb4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01d      	beq.n	8004142 <HAL_TIM_Base_Start+0x66>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410e:	d018      	beq.n	8004142 <HAL_TIM_Base_Start+0x66>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1f      	ldr	r2, [pc, #124]	; (8004194 <HAL_TIM_Base_Start+0xb8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <HAL_TIM_Base_Start+0x66>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1e      	ldr	r2, [pc, #120]	; (8004198 <HAL_TIM_Base_Start+0xbc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00e      	beq.n	8004142 <HAL_TIM_Base_Start+0x66>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1c      	ldr	r2, [pc, #112]	; (800419c <HAL_TIM_Base_Start+0xc0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d009      	beq.n	8004142 <HAL_TIM_Base_Start+0x66>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1b      	ldr	r2, [pc, #108]	; (80041a0 <HAL_TIM_Base_Start+0xc4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d004      	beq.n	8004142 <HAL_TIM_Base_Start+0x66>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a19      	ldr	r2, [pc, #100]	; (80041a4 <HAL_TIM_Base_Start+0xc8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d115      	bne.n	800416e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	4b17      	ldr	r3, [pc, #92]	; (80041a8 <HAL_TIM_Base_Start+0xcc>)
 800414a:	4013      	ands	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b06      	cmp	r3, #6
 8004152:	d015      	beq.n	8004180 <HAL_TIM_Base_Start+0xa4>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415a:	d011      	beq.n	8004180 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	e008      	b.n	8004180 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e000      	b.n	8004182 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004180:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40012c00 	.word	0x40012c00
 8004194:	40000400 	.word	0x40000400
 8004198:	40000800 	.word	0x40000800
 800419c:	40000c00 	.word	0x40000c00
 80041a0:	40013400 	.word	0x40013400
 80041a4:	40014000 	.word	0x40014000
 80041a8:	00010007 	.word	0x00010007

080041ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_TIM_ConfigClockSource+0x18>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e0a8      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x16a>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b40      	cmp	r3, #64	; 0x40
 80041fe:	d067      	beq.n	80042d0 <HAL_TIM_ConfigClockSource+0x124>
 8004200:	2b40      	cmp	r3, #64	; 0x40
 8004202:	d80b      	bhi.n	800421c <HAL_TIM_ConfigClockSource+0x70>
 8004204:	2b10      	cmp	r3, #16
 8004206:	d073      	beq.n	80042f0 <HAL_TIM_ConfigClockSource+0x144>
 8004208:	2b10      	cmp	r3, #16
 800420a:	d802      	bhi.n	8004212 <HAL_TIM_ConfigClockSource+0x66>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d06f      	beq.n	80042f0 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004210:	e078      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004212:	2b20      	cmp	r3, #32
 8004214:	d06c      	beq.n	80042f0 <HAL_TIM_ConfigClockSource+0x144>
 8004216:	2b30      	cmp	r3, #48	; 0x30
 8004218:	d06a      	beq.n	80042f0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800421a:	e073      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800421c:	2b70      	cmp	r3, #112	; 0x70
 800421e:	d00d      	beq.n	800423c <HAL_TIM_ConfigClockSource+0x90>
 8004220:	2b70      	cmp	r3, #112	; 0x70
 8004222:	d804      	bhi.n	800422e <HAL_TIM_ConfigClockSource+0x82>
 8004224:	2b50      	cmp	r3, #80	; 0x50
 8004226:	d033      	beq.n	8004290 <HAL_TIM_ConfigClockSource+0xe4>
 8004228:	2b60      	cmp	r3, #96	; 0x60
 800422a:	d041      	beq.n	80042b0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800422c:	e06a      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004232:	d066      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0x156>
 8004234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004238:	d017      	beq.n	800426a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800423a:	e063      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6899      	ldr	r1, [r3, #8]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f000 f97c 	bl	8004548 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800425e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	609a      	str	r2, [r3, #8]
      break;
 8004268:	e04c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	6899      	ldr	r1, [r3, #8]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f000 f965 	bl	8004548 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800428c:	609a      	str	r2, [r3, #8]
      break;
 800428e:	e039      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6859      	ldr	r1, [r3, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	461a      	mov	r2, r3
 800429e:	f000 f8d9 	bl	8004454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2150      	movs	r1, #80	; 0x50
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 f932 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 80042ae:	e029      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6859      	ldr	r1, [r3, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	461a      	mov	r2, r3
 80042be:	f000 f8f8 	bl	80044b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2160      	movs	r1, #96	; 0x60
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 f922 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 80042ce:	e019      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6818      	ldr	r0, [r3, #0]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	461a      	mov	r2, r3
 80042de:	f000 f8b9 	bl	8004454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2140      	movs	r1, #64	; 0x40
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 f912 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 80042ee:	e009      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4619      	mov	r1, r3
 80042fa:	4610      	mov	r0, r2
 80042fc:	f000 f909 	bl	8004512 <TIM_ITRx_SetConfig>
        break;
 8004300:	e000      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a40      	ldr	r2, [pc, #256]	; (8004434 <TIM_Base_SetConfig+0x114>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d013      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433e:	d00f      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a3d      	ldr	r2, [pc, #244]	; (8004438 <TIM_Base_SetConfig+0x118>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00b      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a3c      	ldr	r2, [pc, #240]	; (800443c <TIM_Base_SetConfig+0x11c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d007      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a3b      	ldr	r2, [pc, #236]	; (8004440 <TIM_Base_SetConfig+0x120>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a3a      	ldr	r2, [pc, #232]	; (8004444 <TIM_Base_SetConfig+0x124>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d108      	bne.n	8004372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a2f      	ldr	r2, [pc, #188]	; (8004434 <TIM_Base_SetConfig+0x114>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01f      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004380:	d01b      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a2c      	ldr	r2, [pc, #176]	; (8004438 <TIM_Base_SetConfig+0x118>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d017      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2b      	ldr	r2, [pc, #172]	; (800443c <TIM_Base_SetConfig+0x11c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2a      	ldr	r2, [pc, #168]	; (8004440 <TIM_Base_SetConfig+0x120>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00f      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a29      	ldr	r2, [pc, #164]	; (8004444 <TIM_Base_SetConfig+0x124>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a28      	ldr	r2, [pc, #160]	; (8004448 <TIM_Base_SetConfig+0x128>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a27      	ldr	r2, [pc, #156]	; (800444c <TIM_Base_SetConfig+0x12c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a26      	ldr	r2, [pc, #152]	; (8004450 <TIM_Base_SetConfig+0x130>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d108      	bne.n	80043cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a10      	ldr	r2, [pc, #64]	; (8004434 <TIM_Base_SetConfig+0x114>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00f      	beq.n	8004418 <TIM_Base_SetConfig+0xf8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a12      	ldr	r2, [pc, #72]	; (8004444 <TIM_Base_SetConfig+0x124>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00b      	beq.n	8004418 <TIM_Base_SetConfig+0xf8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a11      	ldr	r2, [pc, #68]	; (8004448 <TIM_Base_SetConfig+0x128>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d007      	beq.n	8004418 <TIM_Base_SetConfig+0xf8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a10      	ldr	r2, [pc, #64]	; (800444c <TIM_Base_SetConfig+0x12c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_Base_SetConfig+0xf8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <TIM_Base_SetConfig+0x130>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d103      	bne.n	8004420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	615a      	str	r2, [r3, #20]
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	40013400 	.word	0x40013400
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800

08004454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f023 0201 	bic.w	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800447e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 030a 	bic.w	r3, r3, #10
 8004490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b087      	sub	sp, #28
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f023 0210 	bic.w	r2, r3, #16
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	031b      	lsls	r3, r3, #12
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	f043 0307 	orr.w	r3, r3, #7
 8004534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	609a      	str	r2, [r3, #8]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	021a      	lsls	r2, r3, #8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	431a      	orrs	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4313      	orrs	r3, r2
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	609a      	str	r2, [r3, #8]
}
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800459c:	2302      	movs	r3, #2
 800459e:	e068      	b.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a2e      	ldr	r2, [pc, #184]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a2d      	ldr	r2, [pc, #180]	; (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d108      	bne.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1e      	ldr	r2, [pc, #120]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d01d      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004612:	d018      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1a      	ldr	r2, [pc, #104]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00e      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d009      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a13      	ldr	r2, [pc, #76]	; (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d004      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a14      	ldr	r2, [pc, #80]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d10c      	bne.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800464c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	4313      	orrs	r3, r2
 8004656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40013400 	.word	0x40013400
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40014000 	.word	0x40014000

08004698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e040      	b.n	800472c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fc fa66 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2224      	movs	r2, #36	; 0x24
 80046c4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f82c 	bl	8004734 <UART_SetConfig>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e022      	b.n	800472c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 faaa 	bl	8004c48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fb31 	bl	8004d8c <UART_CheckIdleState>
 800472a:	4603      	mov	r3, r0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004734:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004738:	b088      	sub	sp, #32
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	4313      	orrs	r3, r2
 8004758:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	4bac      	ldr	r3, [pc, #688]	; (8004a14 <UART_SetConfig+0x2e0>)
 8004762:	4013      	ands	r3, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	69f9      	ldr	r1, [r7, #28]
 800476a:	430b      	orrs	r3, r1
 800476c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4aa2      	ldr	r2, [pc, #648]	; (8004a18 <UART_SetConfig+0x2e4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d004      	beq.n	800479e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	4313      	orrs	r3, r2
 800479c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69fa      	ldr	r2, [r7, #28]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a99      	ldr	r2, [pc, #612]	; (8004a1c <UART_SetConfig+0x2e8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d121      	bne.n	8004800 <UART_SetConfig+0xcc>
 80047bc:	4b98      	ldr	r3, [pc, #608]	; (8004a20 <UART_SetConfig+0x2ec>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d816      	bhi.n	80047f8 <UART_SetConfig+0xc4>
 80047ca:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0x9c>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	080047e1 	.word	0x080047e1
 80047d4:	080047ed 	.word	0x080047ed
 80047d8:	080047e7 	.word	0x080047e7
 80047dc:	080047f3 	.word	0x080047f3
 80047e0:	2301      	movs	r3, #1
 80047e2:	76fb      	strb	r3, [r7, #27]
 80047e4:	e0e8      	b.n	80049b8 <UART_SetConfig+0x284>
 80047e6:	2302      	movs	r3, #2
 80047e8:	76fb      	strb	r3, [r7, #27]
 80047ea:	e0e5      	b.n	80049b8 <UART_SetConfig+0x284>
 80047ec:	2304      	movs	r3, #4
 80047ee:	76fb      	strb	r3, [r7, #27]
 80047f0:	e0e2      	b.n	80049b8 <UART_SetConfig+0x284>
 80047f2:	2308      	movs	r3, #8
 80047f4:	76fb      	strb	r3, [r7, #27]
 80047f6:	e0df      	b.n	80049b8 <UART_SetConfig+0x284>
 80047f8:	2310      	movs	r3, #16
 80047fa:	76fb      	strb	r3, [r7, #27]
 80047fc:	bf00      	nop
 80047fe:	e0db      	b.n	80049b8 <UART_SetConfig+0x284>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a87      	ldr	r2, [pc, #540]	; (8004a24 <UART_SetConfig+0x2f0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d134      	bne.n	8004874 <UART_SetConfig+0x140>
 800480a:	4b85      	ldr	r3, [pc, #532]	; (8004a20 <UART_SetConfig+0x2ec>)
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004810:	f003 030c 	and.w	r3, r3, #12
 8004814:	2b0c      	cmp	r3, #12
 8004816:	d829      	bhi.n	800486c <UART_SetConfig+0x138>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <UART_SetConfig+0xec>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004855 	.word	0x08004855
 8004824:	0800486d 	.word	0x0800486d
 8004828:	0800486d 	.word	0x0800486d
 800482c:	0800486d 	.word	0x0800486d
 8004830:	08004861 	.word	0x08004861
 8004834:	0800486d 	.word	0x0800486d
 8004838:	0800486d 	.word	0x0800486d
 800483c:	0800486d 	.word	0x0800486d
 8004840:	0800485b 	.word	0x0800485b
 8004844:	0800486d 	.word	0x0800486d
 8004848:	0800486d 	.word	0x0800486d
 800484c:	0800486d 	.word	0x0800486d
 8004850:	08004867 	.word	0x08004867
 8004854:	2300      	movs	r3, #0
 8004856:	76fb      	strb	r3, [r7, #27]
 8004858:	e0ae      	b.n	80049b8 <UART_SetConfig+0x284>
 800485a:	2302      	movs	r3, #2
 800485c:	76fb      	strb	r3, [r7, #27]
 800485e:	e0ab      	b.n	80049b8 <UART_SetConfig+0x284>
 8004860:	2304      	movs	r3, #4
 8004862:	76fb      	strb	r3, [r7, #27]
 8004864:	e0a8      	b.n	80049b8 <UART_SetConfig+0x284>
 8004866:	2308      	movs	r3, #8
 8004868:	76fb      	strb	r3, [r7, #27]
 800486a:	e0a5      	b.n	80049b8 <UART_SetConfig+0x284>
 800486c:	2310      	movs	r3, #16
 800486e:	76fb      	strb	r3, [r7, #27]
 8004870:	bf00      	nop
 8004872:	e0a1      	b.n	80049b8 <UART_SetConfig+0x284>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a6b      	ldr	r2, [pc, #428]	; (8004a28 <UART_SetConfig+0x2f4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d120      	bne.n	80048c0 <UART_SetConfig+0x18c>
 800487e:	4b68      	ldr	r3, [pc, #416]	; (8004a20 <UART_SetConfig+0x2ec>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004888:	2b10      	cmp	r3, #16
 800488a:	d00f      	beq.n	80048ac <UART_SetConfig+0x178>
 800488c:	2b10      	cmp	r3, #16
 800488e:	d802      	bhi.n	8004896 <UART_SetConfig+0x162>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <UART_SetConfig+0x16c>
 8004894:	e010      	b.n	80048b8 <UART_SetConfig+0x184>
 8004896:	2b20      	cmp	r3, #32
 8004898:	d005      	beq.n	80048a6 <UART_SetConfig+0x172>
 800489a:	2b30      	cmp	r3, #48	; 0x30
 800489c:	d009      	beq.n	80048b2 <UART_SetConfig+0x17e>
 800489e:	e00b      	b.n	80048b8 <UART_SetConfig+0x184>
 80048a0:	2300      	movs	r3, #0
 80048a2:	76fb      	strb	r3, [r7, #27]
 80048a4:	e088      	b.n	80049b8 <UART_SetConfig+0x284>
 80048a6:	2302      	movs	r3, #2
 80048a8:	76fb      	strb	r3, [r7, #27]
 80048aa:	e085      	b.n	80049b8 <UART_SetConfig+0x284>
 80048ac:	2304      	movs	r3, #4
 80048ae:	76fb      	strb	r3, [r7, #27]
 80048b0:	e082      	b.n	80049b8 <UART_SetConfig+0x284>
 80048b2:	2308      	movs	r3, #8
 80048b4:	76fb      	strb	r3, [r7, #27]
 80048b6:	e07f      	b.n	80049b8 <UART_SetConfig+0x284>
 80048b8:	2310      	movs	r3, #16
 80048ba:	76fb      	strb	r3, [r7, #27]
 80048bc:	bf00      	nop
 80048be:	e07b      	b.n	80049b8 <UART_SetConfig+0x284>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a59      	ldr	r2, [pc, #356]	; (8004a2c <UART_SetConfig+0x2f8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d120      	bne.n	800490c <UART_SetConfig+0x1d8>
 80048ca:	4b55      	ldr	r3, [pc, #340]	; (8004a20 <UART_SetConfig+0x2ec>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048d4:	2b40      	cmp	r3, #64	; 0x40
 80048d6:	d00f      	beq.n	80048f8 <UART_SetConfig+0x1c4>
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d802      	bhi.n	80048e2 <UART_SetConfig+0x1ae>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <UART_SetConfig+0x1b8>
 80048e0:	e010      	b.n	8004904 <UART_SetConfig+0x1d0>
 80048e2:	2b80      	cmp	r3, #128	; 0x80
 80048e4:	d005      	beq.n	80048f2 <UART_SetConfig+0x1be>
 80048e6:	2bc0      	cmp	r3, #192	; 0xc0
 80048e8:	d009      	beq.n	80048fe <UART_SetConfig+0x1ca>
 80048ea:	e00b      	b.n	8004904 <UART_SetConfig+0x1d0>
 80048ec:	2300      	movs	r3, #0
 80048ee:	76fb      	strb	r3, [r7, #27]
 80048f0:	e062      	b.n	80049b8 <UART_SetConfig+0x284>
 80048f2:	2302      	movs	r3, #2
 80048f4:	76fb      	strb	r3, [r7, #27]
 80048f6:	e05f      	b.n	80049b8 <UART_SetConfig+0x284>
 80048f8:	2304      	movs	r3, #4
 80048fa:	76fb      	strb	r3, [r7, #27]
 80048fc:	e05c      	b.n	80049b8 <UART_SetConfig+0x284>
 80048fe:	2308      	movs	r3, #8
 8004900:	76fb      	strb	r3, [r7, #27]
 8004902:	e059      	b.n	80049b8 <UART_SetConfig+0x284>
 8004904:	2310      	movs	r3, #16
 8004906:	76fb      	strb	r3, [r7, #27]
 8004908:	bf00      	nop
 800490a:	e055      	b.n	80049b8 <UART_SetConfig+0x284>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a47      	ldr	r2, [pc, #284]	; (8004a30 <UART_SetConfig+0x2fc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d124      	bne.n	8004960 <UART_SetConfig+0x22c>
 8004916:	4b42      	ldr	r3, [pc, #264]	; (8004a20 <UART_SetConfig+0x2ec>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004924:	d012      	beq.n	800494c <UART_SetConfig+0x218>
 8004926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492a:	d802      	bhi.n	8004932 <UART_SetConfig+0x1fe>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <UART_SetConfig+0x20c>
 8004930:	e012      	b.n	8004958 <UART_SetConfig+0x224>
 8004932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004936:	d006      	beq.n	8004946 <UART_SetConfig+0x212>
 8004938:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800493c:	d009      	beq.n	8004952 <UART_SetConfig+0x21e>
 800493e:	e00b      	b.n	8004958 <UART_SetConfig+0x224>
 8004940:	2300      	movs	r3, #0
 8004942:	76fb      	strb	r3, [r7, #27]
 8004944:	e038      	b.n	80049b8 <UART_SetConfig+0x284>
 8004946:	2302      	movs	r3, #2
 8004948:	76fb      	strb	r3, [r7, #27]
 800494a:	e035      	b.n	80049b8 <UART_SetConfig+0x284>
 800494c:	2304      	movs	r3, #4
 800494e:	76fb      	strb	r3, [r7, #27]
 8004950:	e032      	b.n	80049b8 <UART_SetConfig+0x284>
 8004952:	2308      	movs	r3, #8
 8004954:	76fb      	strb	r3, [r7, #27]
 8004956:	e02f      	b.n	80049b8 <UART_SetConfig+0x284>
 8004958:	2310      	movs	r3, #16
 800495a:	76fb      	strb	r3, [r7, #27]
 800495c:	bf00      	nop
 800495e:	e02b      	b.n	80049b8 <UART_SetConfig+0x284>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2c      	ldr	r2, [pc, #176]	; (8004a18 <UART_SetConfig+0x2e4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d124      	bne.n	80049b4 <UART_SetConfig+0x280>
 800496a:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <UART_SetConfig+0x2ec>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004970:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004978:	d012      	beq.n	80049a0 <UART_SetConfig+0x26c>
 800497a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497e:	d802      	bhi.n	8004986 <UART_SetConfig+0x252>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <UART_SetConfig+0x260>
 8004984:	e012      	b.n	80049ac <UART_SetConfig+0x278>
 8004986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498a:	d006      	beq.n	800499a <UART_SetConfig+0x266>
 800498c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004990:	d009      	beq.n	80049a6 <UART_SetConfig+0x272>
 8004992:	e00b      	b.n	80049ac <UART_SetConfig+0x278>
 8004994:	2300      	movs	r3, #0
 8004996:	76fb      	strb	r3, [r7, #27]
 8004998:	e00e      	b.n	80049b8 <UART_SetConfig+0x284>
 800499a:	2302      	movs	r3, #2
 800499c:	76fb      	strb	r3, [r7, #27]
 800499e:	e00b      	b.n	80049b8 <UART_SetConfig+0x284>
 80049a0:	2304      	movs	r3, #4
 80049a2:	76fb      	strb	r3, [r7, #27]
 80049a4:	e008      	b.n	80049b8 <UART_SetConfig+0x284>
 80049a6:	2308      	movs	r3, #8
 80049a8:	76fb      	strb	r3, [r7, #27]
 80049aa:	e005      	b.n	80049b8 <UART_SetConfig+0x284>
 80049ac:	2310      	movs	r3, #16
 80049ae:	76fb      	strb	r3, [r7, #27]
 80049b0:	bf00      	nop
 80049b2:	e001      	b.n	80049b8 <UART_SetConfig+0x284>
 80049b4:	2310      	movs	r3, #16
 80049b6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a16      	ldr	r2, [pc, #88]	; (8004a18 <UART_SetConfig+0x2e4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	f040 8087 	bne.w	8004ad2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049c4:	7efb      	ldrb	r3, [r7, #27]
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d836      	bhi.n	8004a38 <UART_SetConfig+0x304>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <UART_SetConfig+0x29c>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	080049f5 	.word	0x080049f5
 80049d4:	08004a39 	.word	0x08004a39
 80049d8:	080049fd 	.word	0x080049fd
 80049dc:	08004a39 	.word	0x08004a39
 80049e0:	08004a03 	.word	0x08004a03
 80049e4:	08004a39 	.word	0x08004a39
 80049e8:	08004a39 	.word	0x08004a39
 80049ec:	08004a39 	.word	0x08004a39
 80049f0:	08004a0b 	.word	0x08004a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f4:	f7fe fdde 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 80049f8:	6178      	str	r0, [r7, #20]
        break;
 80049fa:	e022      	b.n	8004a42 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <UART_SetConfig+0x300>)
 80049fe:	617b      	str	r3, [r7, #20]
        break;
 8004a00:	e01f      	b.n	8004a42 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a02:	f7fe fd41 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 8004a06:	6178      	str	r0, [r7, #20]
        break;
 8004a08:	e01b      	b.n	8004a42 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a0e:	617b      	str	r3, [r7, #20]
        break;
 8004a10:	e017      	b.n	8004a42 <UART_SetConfig+0x30e>
 8004a12:	bf00      	nop
 8004a14:	efff69f3 	.word	0xefff69f3
 8004a18:	40008000 	.word	0x40008000
 8004a1c:	40013800 	.word	0x40013800
 8004a20:	40021000 	.word	0x40021000
 8004a24:	40004400 	.word	0x40004400
 8004a28:	40004800 	.word	0x40004800
 8004a2c:	40004c00 	.word	0x40004c00
 8004a30:	40005000 	.word	0x40005000
 8004a34:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	76bb      	strb	r3, [r7, #26]
        break;
 8004a40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80f1 	beq.w	8004c2c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	4413      	add	r3, r2
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d305      	bcc.n	8004a66 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d902      	bls.n	8004a6c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	76bb      	strb	r3, [r7, #26]
 8004a6a:	e0df      	b.n	8004c2c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	f04f 0400 	mov.w	r4, #0
 8004a7c:	0214      	lsls	r4, r2, #8
 8004a7e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004a82:	020b      	lsls	r3, r1, #8
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6852      	ldr	r2, [r2, #4]
 8004a88:	0852      	lsrs	r2, r2, #1
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	eb13 0b01 	adds.w	fp, r3, r1
 8004a94:	eb44 0c02 	adc.w	ip, r4, r2
 8004a98:	4658      	mov	r0, fp
 8004a9a:	4661      	mov	r1, ip
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f04f 0400 	mov.w	r4, #0
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4623      	mov	r3, r4
 8004aa8:	f7fb fb8e 	bl	80001c8 <__aeabi_uldivmod>
 8004aac:	4603      	mov	r3, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ab8:	d308      	bcc.n	8004acc <UART_SetConfig+0x398>
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac0:	d204      	bcs.n	8004acc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	60da      	str	r2, [r3, #12]
 8004aca:	e0af      	b.n	8004c2c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	76bb      	strb	r3, [r7, #26]
 8004ad0:	e0ac      	b.n	8004c2c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ada:	d15b      	bne.n	8004b94 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004adc:	7efb      	ldrb	r3, [r7, #27]
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d827      	bhi.n	8004b32 <UART_SetConfig+0x3fe>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <UART_SetConfig+0x3b4>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b0d 	.word	0x08004b0d
 8004aec:	08004b15 	.word	0x08004b15
 8004af0:	08004b1d 	.word	0x08004b1d
 8004af4:	08004b33 	.word	0x08004b33
 8004af8:	08004b23 	.word	0x08004b23
 8004afc:	08004b33 	.word	0x08004b33
 8004b00:	08004b33 	.word	0x08004b33
 8004b04:	08004b33 	.word	0x08004b33
 8004b08:	08004b2b 	.word	0x08004b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b0c:	f7fe fd52 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8004b10:	6178      	str	r0, [r7, #20]
        break;
 8004b12:	e013      	b.n	8004b3c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b14:	f7fe fd64 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 8004b18:	6178      	str	r0, [r7, #20]
        break;
 8004b1a:	e00f      	b.n	8004b3c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b1c:	4b49      	ldr	r3, [pc, #292]	; (8004c44 <UART_SetConfig+0x510>)
 8004b1e:	617b      	str	r3, [r7, #20]
        break;
 8004b20:	e00c      	b.n	8004b3c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b22:	f7fe fcb1 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 8004b26:	6178      	str	r0, [r7, #20]
        break;
 8004b28:	e008      	b.n	8004b3c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2e:	617b      	str	r3, [r7, #20]
        break;
 8004b30:	e004      	b.n	8004b3c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	76bb      	strb	r3, [r7, #26]
        break;
 8004b3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d074      	beq.n	8004c2c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	005a      	lsls	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	441a      	add	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b0f      	cmp	r3, #15
 8004b5e:	d916      	bls.n	8004b8e <UART_SetConfig+0x45a>
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b66:	d212      	bcs.n	8004b8e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f023 030f 	bic.w	r3, r3, #15
 8004b70:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	89fb      	ldrh	r3, [r7, #14]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	89fa      	ldrh	r2, [r7, #14]
 8004b8a:	60da      	str	r2, [r3, #12]
 8004b8c:	e04e      	b.n	8004c2c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	76bb      	strb	r3, [r7, #26]
 8004b92:	e04b      	b.n	8004c2c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b94:	7efb      	ldrb	r3, [r7, #27]
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d827      	bhi.n	8004bea <UART_SetConfig+0x4b6>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <UART_SetConfig+0x46c>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bc5 	.word	0x08004bc5
 8004ba4:	08004bcd 	.word	0x08004bcd
 8004ba8:	08004bd5 	.word	0x08004bd5
 8004bac:	08004beb 	.word	0x08004beb
 8004bb0:	08004bdb 	.word	0x08004bdb
 8004bb4:	08004beb 	.word	0x08004beb
 8004bb8:	08004beb 	.word	0x08004beb
 8004bbc:	08004beb 	.word	0x08004beb
 8004bc0:	08004be3 	.word	0x08004be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc4:	f7fe fcf6 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8004bc8:	6178      	str	r0, [r7, #20]
        break;
 8004bca:	e013      	b.n	8004bf4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bcc:	f7fe fd08 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 8004bd0:	6178      	str	r0, [r7, #20]
        break;
 8004bd2:	e00f      	b.n	8004bf4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd4:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <UART_SetConfig+0x510>)
 8004bd6:	617b      	str	r3, [r7, #20]
        break;
 8004bd8:	e00c      	b.n	8004bf4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bda:	f7fe fc55 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 8004bde:	6178      	str	r0, [r7, #20]
        break;
 8004be0:	e008      	b.n	8004bf4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be6:	617b      	str	r3, [r7, #20]
        break;
 8004be8:	e004      	b.n	8004bf4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	76bb      	strb	r3, [r7, #26]
        break;
 8004bf2:	bf00      	nop
    }

    if (pclk != 0U)
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d018      	beq.n	8004c2c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	085a      	lsrs	r2, r3, #1
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	441a      	add	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	2b0f      	cmp	r3, #15
 8004c14:	d908      	bls.n	8004c28 <UART_SetConfig+0x4f4>
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1c:	d204      	bcs.n	8004c28 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	60da      	str	r2, [r3, #12]
 8004c26:	e001      	b.n	8004c2c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c38:	7ebb      	ldrb	r3, [r7, #26]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004c44:	00f42400 	.word	0x00f42400

08004c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01a      	beq.n	8004d5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d46:	d10a      	bne.n	8004d5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	605a      	str	r2, [r3, #4]
  }
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004d9a:	f7fb ffd3 	bl	8000d44 <HAL_GetTick>
 8004d9e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d10e      	bne.n	8004dcc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f82a 	bl	8004e16 <UART_WaitOnFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e020      	b.n	8004e0e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d10e      	bne.n	8004df8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f814 	bl	8004e16 <UART_WaitOnFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e00a      	b.n	8004e0e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	4613      	mov	r3, r2
 8004e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e26:	e05d      	b.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2e:	d059      	beq.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e30:	f7fb ff88 	bl	8000d44 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d302      	bcc.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d11b      	bne.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e54:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e042      	b.n	8004f04 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d02b      	beq.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e9a:	d123      	bne.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ea4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004eb4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0201 	bic.w	r2, r2, #1
 8004ec4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e00f      	b.n	8004f04 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69da      	ldr	r2, [r3, #28]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4013      	ands	r3, r2
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	bf0c      	ite	eq
 8004ef4:	2301      	moveq	r3, #1
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	79fb      	ldrb	r3, [r7, #7]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d092      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <__libc_init_array>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	4e0d      	ldr	r6, [pc, #52]	; (8004f44 <__libc_init_array+0x38>)
 8004f10:	4c0d      	ldr	r4, [pc, #52]	; (8004f48 <__libc_init_array+0x3c>)
 8004f12:	1ba4      	subs	r4, r4, r6
 8004f14:	10a4      	asrs	r4, r4, #2
 8004f16:	2500      	movs	r5, #0
 8004f18:	42a5      	cmp	r5, r4
 8004f1a:	d109      	bne.n	8004f30 <__libc_init_array+0x24>
 8004f1c:	4e0b      	ldr	r6, [pc, #44]	; (8004f4c <__libc_init_array+0x40>)
 8004f1e:	4c0c      	ldr	r4, [pc, #48]	; (8004f50 <__libc_init_array+0x44>)
 8004f20:	f000 f820 	bl	8004f64 <_init>
 8004f24:	1ba4      	subs	r4, r4, r6
 8004f26:	10a4      	asrs	r4, r4, #2
 8004f28:	2500      	movs	r5, #0
 8004f2a:	42a5      	cmp	r5, r4
 8004f2c:	d105      	bne.n	8004f3a <__libc_init_array+0x2e>
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f34:	4798      	blx	r3
 8004f36:	3501      	adds	r5, #1
 8004f38:	e7ee      	b.n	8004f18 <__libc_init_array+0xc>
 8004f3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f3e:	4798      	blx	r3
 8004f40:	3501      	adds	r5, #1
 8004f42:	e7f2      	b.n	8004f2a <__libc_init_array+0x1e>
 8004f44:	08004fcc 	.word	0x08004fcc
 8004f48:	08004fcc 	.word	0x08004fcc
 8004f4c:	08004fcc 	.word	0x08004fcc
 8004f50:	08004fd0 	.word	0x08004fd0

08004f54 <memset>:
 8004f54:	4402      	add	r2, r0
 8004f56:	4603      	mov	r3, r0
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d100      	bne.n	8004f5e <memset+0xa>
 8004f5c:	4770      	bx	lr
 8004f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f62:	e7f9      	b.n	8004f58 <memset+0x4>

08004f64 <_init>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	bf00      	nop
 8004f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6a:	bc08      	pop	{r3}
 8004f6c:	469e      	mov	lr, r3
 8004f6e:	4770      	bx	lr

08004f70 <_fini>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	bf00      	nop
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr
